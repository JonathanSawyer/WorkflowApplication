<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Http.OData</name>
  </assembly>
  <members>
    <member name="T:System.Net.Http.ODataHttpRequestMessageExtensions">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> 클래스에 대한 확장 메서드를 제공합니다. </summary>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.CreateODataErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,Microsoft.Data.OData.ODataError)">
      <summary> 콘텐츠 협상을 수행하고 oDataError를 콘텐츠로 래핑하는 &lt;see cref="T:System.Net.Http.ObjectContent`1" /&gt; 인스턴스의 오류를 나타내는 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만드는 도우미 메서드입니다. 포맷터가 없는 경우 이 메서드는 상태 406 NotAcceptable로 응답을 반환합니다. </summary>
      <returns>상태 코드 statusCode로 oDataError를 래핑한 오류 응답입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="statusCode">작성된 응답의 상태 코드입니다.</param>
      <param name="oDataError">래핑할 OData 오류입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetEdmModel(System.Net.Http.HttpRequestMessage)">
      <summary> 요청에 연결된 EDM 모델을 검색합니다. </summary>
      <returns>이 요청에 연결된 EDM 모델이고 없는 경우 null입니다.</returns>
      <param name="request">요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetInlineCount(System.Net.Http.HttpRequestMessage)">
      <summary> OData 응답에 사용할 인라인 카운트를 가져옵니다. </summary>
      <returns>다시 전송할 인라인 카운트이고 설정되지 않은 경우 null입니다.</returns>
      <param name="request">요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetNextPageLink(System.Net.Http.HttpRequestMessage)">
      <summary> OData 응답에 사용할 다음 페이지 링크를 가져옵니다. </summary>
      <returns>다시 전송할 다음 페이지 링크이고 설정되지 않은 경우 null입니다.</returns>
      <param name="request">요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetODataPath(System.Net.Http.HttpRequestMessage)">
      <summary> 요청의 OData 경로를 가져옵니다. </summary>
      <returns>요청의 OData 경로입니다.</returns>
      <param name="request">요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetODataPathHandler(System.Net.Http.HttpRequestMessage)">
      <summary> 링크 생성에 사용할 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />를 가져옵니다. </summary>
      <returns>링크 생성에 사용할 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />입니다.</returns>
      <param name="request">요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetODataRouteName(System.Net.Http.HttpRequestMessage)">
      <summary> OData 링크 생성에 사용할 경로 이름을 검색합니다. </summary>
      <returns>이 요청에 연결된 OData 링크 생성에 사용할 경로 이름이고 없는 경우 null입니다.</returns>
      <param name="request">요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetODataRoutingConventions(System.Net.Http.HttpRequestMessage)">
      <summary> 컨트롤러 및 작업 선택에 사용할 OData 라우팅 규칙을 가져옵니다. </summary>
      <returns>이 요청에 연결된 컨트롤러 및 작업 선택에 사용할 OData 라우팅 규칙이고 아무 것도 없는 경우 null입니다.</returns>
      <param name="request">요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetEdmModel(System.Net.Http.HttpRequestMessage,Microsoft.Data.Edm.IEdmModel)">
      <summary> 지정된 EDM 모델을 요청과 연결합니다. </summary>
      <param name="request">요청입니다.</param>
      <param name="model">요청과 연결할 EDM 모델입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetInlineCount(System.Net.Http.HttpRequestMessage,System.Int64)">
      <summary> OData 응답에 사용할 인라인 카운트를 설정합니다. </summary>
      <param name="request">요청입니다.</param>
      <param name="inlineCount">클라이언트로 다시 전송할 인라인 카운트입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetNextPageLink(System.Net.Http.HttpRequestMessage,System.Uri)">
      <summary> OData 응답에 사용할 다음 페이지 링크를 설정합니다. </summary>
      <param name="request">요청입니다.</param>
      <param name="nextPageLink">클라이언트로 다시 전송할 다음 페이지 링크입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetODataPath(System.Net.Http.HttpRequestMessage,System.Web.Http.OData.Routing.ODataPath)">
      <summary> 요청의 OData 경로를 설정합니다. </summary>
      <param name="request">요청입니다.</param>
      <param name="odataPath">요청의 OData 경로입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetODataPathHandler(System.Net.Http.HttpRequestMessage,System.Web.Http.OData.Routing.IODataPathHandler)">
      <summary> 링크 생성에 사용할 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />를 설정합니다. </summary>
      <param name="request">요청입니다.</param>
      <param name="pathHandler">링크 생성에 사용할 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetODataRouteName(System.Net.Http.HttpRequestMessage,System.String)">
      <summary> OData 링크 생성에 사용할 지정된 경로 이름을 설정합니다. </summary>
      <param name="request">요청입니다.</param>
      <param name="routeName">OData 링크 생성에 사용할 경로 이름입니다.</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetODataRoutingConventions(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention})">
      <summary> 컨트롤러 및 작업 선택에 사용할 OData 라우팅 규칙을 설정합니다. </summary>
      <param name="request">요청입니다.</param>
      <param name="routingConventions">컨트롤러 및 작업 선택에 사용할 라우팅 규칙입니다.</param>
    </member>
    <member name="T:System.Web.Http.ODataHttpConfigurationExtensions"></member>
    <member name="M:System.Web.Http.ODataHttpConfigurationExtensions.EnableQuerySupport(System.Web.Http.HttpConfiguration)">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> 또는 <see cref="T:System.Linq.IQueryable`1" /> 반환 형식과 함께 작업에 대한 쿼리 지원을 활성화합니다.예기치 않거나 악의적인 쿼리를 처리하지 않으려면 <see cref="T:System.Web.Http.QueryableAttribute" />의 유효성 검사 설정을 사용하여 들어오는 쿼리의 유효성을 검사하십시오.자세한 내용은 http://go.microsoft.com/fwlink/?LinkId=279712를 참조하십시오.</summary>
      <param name="configuration">서버 구성입니다.</param>
    </member>
    <member name="M:System.Web.Http.ODataHttpConfigurationExtensions.EnableQuerySupport(System.Web.Http.HttpConfiguration,System.Web.Http.Filters.IActionFilter)">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> 또는 <see cref="T:System.Linq.IQueryable`1" /> 반환 형식과 함께 작업에 대한 쿼리 지원을 활성화합니다.. 예기치 않거나 악의적인 쿼리를 처리하지 않으려면 <see cref="T:System.Web.Http.QueryableAttribute" />의 유효성 검사 설정을 사용하여 들어오는 쿼리의 유효성을 검사하십시오.자세한 내용은 http://go.microsoft.com/fwlink/?LinkId=279712를 참조하십시오.</summary>
      <param name="configuration">서버 구성입니다.</param>
      <param name="queryFilter">쿼리를 실행하는 작업 필터입니다.</param>
    </member>
    <member name="T:System.Web.Http.ODataHttpErrorExtensions">
      <summary>
        <see cref="T:System.Web.Http.HttpError" /> 클래스에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ODataHttpErrorExtensions.ToODataError(System.Web.Http.HttpError)">
      <summary>
        <paramref name="httpError" />를 <see cref="T:Microsoft.Data.OData.ODataError" />로 변환합니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.OData.ODataError" />을 반환합니다.</returns>
      <param name="httpError">변환할 <see cref="T:System.Web.Http.HttpError" /> 인스턴스입니다.</param>
    </member>
    <member name="T:System.Web.Http.ODataHttpRouteCollectionExtensions">
      <summary>
        <see cref="T:System.Web.Http.HttpRouteCollection" /> 클래스에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ODataHttpRouteCollectionExtensions.MapODataRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,Microsoft.Data.Edm.IEdmModel)">
      <summary>경로 접두사를 사용하지 않고 기본 OData 경로 이름을 사용하여 지정된 OData 경로를 매핑합니다.</summary>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="routeName">매핑할 경로의 이름입니다.</param>
      <param name="routePrefix">OData 경로(route)의 경로 템플릿(path template)에 추가할 접두사입니다.</param>
      <param name="model">OData 경로를 구문 분석하는 데 사용할 EDM 모델입니다.</param>
    </member>
    <member name="M:System.Web.Http.ODataHttpRouteCollectionExtensions.MapODataRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.IODataPathHandler,System.Collections.Generic.IEnumerable{System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention})">
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="routeName">매핑할 경로의 이름입니다.</param>
      <param name="routePrefix">OData 경로(route)의 경로 템플릿(path template)에 추가할 접두사입니다.</param>
      <param name="model">OData 경로를 구문 분석하는 데 사용할 EDM 모델입니다.</param>
      <param name="pathHandler">OData 경로를 구문 분석하는 데 사용할 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />입니다.</param>
      <param name="routingConventions">컨트롤러 및 작업 선택에 사용할 라우팅 규칙입니다.</param>
    </member>
    <member name="T:System.Web.Http.ODataMediaTypeFormatterCollectionExtensions">
      <summary>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> 클래스에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ODataMediaTypeFormatterCollectionExtensions.AddRange(System.Net.Http.Formatting.MediaTypeFormatterCollection,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>지정된 컬렉션의 요소를 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> 끝에 추가합니다.</summary>
      <param name="collection">항목을 추가할 컬렉션입니다.</param>
      <param name="items">
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> 끝에 추가될 항목입니다. 항목 컬렉션 자체는 null일 수 없으나 null인 요소를 포함할 수는 있습니다.</param>
    </member>
    <member name="M:System.Web.Http.ODataMediaTypeFormatterCollectionExtensions.InsertRange(System.Net.Http.Formatting.MediaTypeFormatterCollection,System.Int32,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>  컬렉션 요소를 지정된 인덱스의 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />에 삽입합니다.</summary>
      <param name="collection">항목을 추가할 컬렉션입니다.</param>
      <param name="index">새 요소가 삽입되어야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="items">
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> 끝에 추가될 항목입니다. 항목 컬렉션 자체는 null일 수 없으나 null인 요소를 포함할 수는 있습니다.</param>
    </member>
    <member name="T:System.Web.Http.ODataUrlHelperExtensions">
      <summary>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> 클래스에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ODataUrlHelperExtensions.ODataLink(System.Web.Http.Routing.UrlHelper,System.Collections.Generic.IList{System.Web.Http.OData.Routing.ODataPathSegment})">
      <summary>OData 링크를 생성합니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
      <param name="urlHelper">URL 도우미입니다.</param>
      <param name="segments">OData 경로 세그먼트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ODataUrlHelperExtensions.ODataLink(System.Web.Http.Routing.UrlHelper,System.String,System.Web.Http.OData.Routing.IODataPathHandler,System.Collections.Generic.IList{System.Web.Http.OData.Routing.ODataPathSegment})">
      <summary>요청의 OData 경로 이름 및 경로 처리기를 사용하여 OData 링크를 생성합니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
      <param name="urlHelper">URL 도우미입니다.</param>
      <param name="routeName">OData 경로의 이름입니다.</param>
      <param name="pathHandler">링크를 생성하는 데 사용할 경로 처리기입니다.</param>
      <param name="segments">OData 경로 세그먼트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ODataUrlHelperExtensions.ODataLink(System.Web.Http.Routing.UrlHelper,System.Web.Http.OData.Routing.ODataPathSegment[])">
      <summary>OData 링크를 생성합니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
      <param name="urlHelper">URL 도우미입니다.</param>
      <param name="segments">OData 경로 세그먼트입니다.</param>
    </member>
    <member name="T:System.Web.Http.QueryableAttribute">
      <summary>이 클래스는 OData 쿼리 구문을 사용하여 쿼리를 활성화하기 위해 작업에 적용할 수 있는 특성을 정의합니다.예기치 않거나 악의적인 쿼리를 처리하지 않으려면 <see cref="T:System.Web.Http.QueryableAttribute" />의 유효성 검사 설정을 사용하여 들어오는 쿼리의 유효성을 검사하십시오.자세한 내용은 http://go.microsoft.com/fwlink/?LinkId=279712를 참조하십시오.</summary>
    </member>
    <member name="M:System.Web.Http.QueryableAttribute.#ctor">
      <summary>컨트롤러 작업이 OData 쿼리 매개 변수를 지원하도록 합니다.</summary>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.AllowedArithmeticOperators">
      <summary>허용된 산술 연산자(예: 'add', 'sub', 'mul', 'div', 'mod') 목록을 나타내는 열거를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.AllowedArithmeticOperators" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.AllowedFunctions">
      <summary>$filter 쿼리에 사용되는 허용된 함수 목록을 나타내는 열거를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.AllowedFunctions" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.AllowedLogicalOperators">
      <summary>허용된 논리 연산자(예: 'eq', 'ne', 'gt', 'ge', 'lt', 'le', 'and', 'or', 'not') 목록을 나타내는 열거를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.AllowedLogicalOperators" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.AllowedOrderByProperties">
      <summary>쉼표로 구분된 속성 이름의 목록으로 된 문자열을 가져오거나 설정합니다.쿼리 가능한 결과는 이 목록에 정의된 이러한 속성으로만 정렬할 수 있습니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.AllowedQueryOptions">
      <summary>쿼리 내부에 허용되는 쿼리 매개 변수를 가져오거나 설정합니다.기본값은 $filter, $skip, $top, $orderby, $expand, $select, $inlineCount, $format 및 $skipToken을 포함한 모든 쿼리 옵션입니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.AllowedQueryOptions" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.QueryableAttribute.ApplyQuery(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQueryOptions)">
      <summary>URI에서 들어오는 쿼리와 쿼리 설정에 따라 쿼리를 지정된 IQueryable에 적용합니다.</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable" />을 반환합니다.</returns>
      <param name="queryable">원래 쿼리 가능한 응답 메시지의 인스턴스입니다.</param>
      <param name="queryOptions">들어오는 요청에 따라 생성된 &lt;see cref="T:System.Web.Http.OData.Query.ODataQueryOptions"/&gt; 인스턴스입니다.</param>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.EnableConstantParameterization">
      <summary>상수를 매개 변수화할지 여부를 나타내는 값을 가져오거나 설정합니다.상수를 매개 변수화하면 Entity Framework의 성능이 향상됩니다.</summary>
      <returns>기본값은 true입니다.</returns>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.EnsureStableOrdering">
      <summary>쿼리 컴퍼지션에서 안정적인 정렬 순서를 보장하기 위해 필요할 경우 원래 쿼리를 변경할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>true 값은 안정적인 정렬 순서를 보장하기 위해 필요할 경우 원래 쿼리를 수정해야 함을 나타냅니다.false 값은 쿼리를 수정하지 않고 정렬 순서를 안정적인 것으로 간주할 수 있음을 나타냅니다.안정적인 정렬 순서를 보장하는 쿼리 공급자는 이 값을 false로 설정해야 합니다.기본값은 true입니다.</returns>
    </member>
    <member name="M:System.Web.Http.QueryableAttribute.GetModel(System.Type,System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>지정된 형식 및 요청에 대한 EDM 모델을 가져옵니다.</summary>
      <returns>지정된 형식 및 요청에 대한 EDM 모델입니다.</returns>
      <param name="elementClrType">모델을 검색할 CLR 형식입니다.</param>
      <param name="request">모델을 검색할 요청 메시지입니다.</param>
      <param name="actionDescriptor">쿼리 중인 작업의 작업 설명자입니다.</param>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.HandleNullPropagation">
      <summary>쿼리 컴퍼지션 중에 null 전파가 처리되는 방식을 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>기본값은 <see cref="F:System.Web.Http.OData.Query.HandleNullPropagationOption.Default" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.MaxAnyAllExpressionDepth">
      <summary>쿼리 내부에 중첩된 Any 또는 All 요소의 최대 깊이를 가져오거나 설정합니다.</summary>
      <returns>쿼리 내부에 중첩된 Any 또는 All 요소의 최대 깊이입니다.</returns>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.MaxNodeCount">
      <summary>$filter 구문 트리 내부의 최대 노드 수를 가져오거나 설정합니다.</summary>
      <returns>  기본값은 100입니다.</returns>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.MaxSkip">
      <summary>클라이언트가 요청할 수 있는 $skip의 최대값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Int32" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.MaxTop">
      <summary>클라이언트가 요청할 수 있는 $top의 최대값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Int32" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.QueryableAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>작업이 실행된 후에 쿼리 컴퍼지션을 수행합니다.먼저 반환되는 응답 메시지에서 IQueryable 검색을 시도합니다.그런 다음 QueryableAttribute의 유효성 검사 설정을 토대로 URI에서 쿼리의 유효성을 검사합니다.마지막으로 쿼리를 적절하게 적용하고 응답 메시지에서 다시 재설정합니다.</summary>
      <param name="actionExecutedContext">응답 메시지, 요청 메시지 및 HttpConfiguration 등을 비롯한 이 작업과 관련된 컨텍스트입니다.</param>
    </member>
    <member name="P:System.Web.Http.QueryableAttribute.PageSize">
      <summary>클라이언트로 다시 전송되는 최대 쿼리 결과 수를 가져오거나 설정합니다.</summary>
      <returns>  클라이언트로 다시 전송되는 최대 쿼리 결과 수입니다.</returns>
    </member>
    <member name="M:System.Web.Http.QueryableAttribute.ValidateQuery(System.Net.Http.HttpRequestMessage,System.Web.Http.OData.Query.ODataQueryOptions)">
      <summary>들어오는 요청에서 OData 쿼리의 유효성을 검사합니다.</summary>
      <param name="request">들어오는 요청입니다.</param>
      <param name="queryOptions">들어오는 요청에 따라 생성된 <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 인스턴스입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.AsyncEntitySetController`2">
      <summary>OData 엔터티 집합을 노출하는 컨트롤러에 편리한 시작점을 제공합니다. <see cref="T:System.Web.Http.OData.AsyncEntitySetController" />의 동기 버전입니다.     </summary>
      <typeparam name="TEntity">노출된 엔터티 집합의 엔터티 형식과 연결된 형식입니다.</typeparam>
      <typeparam name="TKey">노출된 엔터티 집합 엔터티 형식의 엔터티 키와 연결된 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.AsyncEntitySetController`2" />의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.CreateEntityAsync(`0)">
      <summary>엔터티 집합에 새 엔터티를 만들려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>만들어진 엔터티입니다.</returns>
      <param name="entity">엔터티 집합에 추가할 엔터티입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.CreateLink(`1,System.String,System.Uri)">
      <summary>두 엔터티 사이에 링크 만들기를 시도하는 POST 및 PUT 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />을 반환합니다.</returns>
      <param name="key">탐색 속성이 있는 엔터티의 키입니다.</param>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
      <param name="link">링크할 엔터티의 URI입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Delete(`1)">
      <summary>엔터티 집합에서 기존 엔터티를 삭제하기 위한 DELETE 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />을 반환합니다.</returns>
      <param name="key">삭제할 엔터티의 엔터티 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.DeleteLink(`1,System.String,System.String)">
      <summary>두 엔터티 사이에 관계 끊기를 시도하는 DELETE 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />을 반환합니다.</returns>
      <param name="key">탐색 속성이 있는 엔터티의 키입니다.</param>
      <param name="relatedKey">관련 엔터티의 키입니다.</param>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.DeleteLink(`1,System.String,System.Uri)">
      <summary>  두 엔터티 사이에 관계 끊기를 시도하는 DELETE 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />을 반환합니다.</returns>
      <param name="key">탐색 속성이 있는 엔터티의 키입니다.</param>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
      <param name="link">탐색 속성에서 제거할 엔터티의 URI입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Get">
      <summary>엔터티 집합에서 엔터티 검색을 시도하는 GET 요청을 처리하려면 이 메서드를 재정의해야 합니다.          </summary>
      <returns>엔터티 집합에서 일치하는 엔터티입니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Get(`1)">
      <summary>엔터티 집합에서 키로 개별 엔터티 검색을 시도하는 GET 요청을 처리합니다.</summary>
      <returns>클라이언트로 다시 전송할 응답 메시지입니다.</returns>
      <param name="key">검색할 엔터티의 엔터티 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.GetEntityByKeyAsync(`1)">
      <summary>  엔터티 집합에서 키로 엔터티를 검색하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>검색된 엔터티이거나 엔터티 집합에서 지정된 엔터티 키가 있는 엔터티를 찾을 수 없는 경우 null입니다.</returns>
      <param name="key">검색할 엔터티의 엔터티 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.GetKey(`0)">
      <summary>지정된 엔터티의 엔터티 키를 가져오려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>엔터티 키 값입니다.</returns>
      <param name="entity">엔터티입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.HandleUnmappedRequest(System.Web.Http.OData.Routing.ODataPath)">
      <summary>   매핑되지 않은 모든 OData 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>클라이언트로 다시 전송할 응답 메시지입니다.</returns>
      <param name="odataPath">요청의 OData 경로입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.AsyncEntitySetController`2.ODataPath">
      <summary>현재 요청의 OData 경로를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Routing.ODataPath" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Patch(`1,System.Web.Http.OData.Delta{`0})">
      <summary>엔터티 집합에서 단일 엔터티를 부분적으로 업데이트하도록 PATCH 및 MERGE 요청을 처리합니다.</summary>
      <returns>클라이언트로 다시 전송할 응답 메시지입니다.</returns>
      <param name="key">업데이트할 엔터티의 엔터티 키입니다.</param>
      <param name="patch">부분적 업데이트를 나타내는 패치입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.PatchEntityAsync(`1,System.Web.Http.OData.Delta{`0})">
      <summary>   엔터티 집합에 있는 기존 엔터티에 부분적 업데이트를 적용하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />을 반환합니다.</returns>
      <param name="key">업데이트할 엔터티의 엔터티 키입니다.</param>
      <param name="patch">부분적 업데이트를 나타내는 패치입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Post(`0)">
      <summary>엔터티 집합에 새 엔터티를 만드는 POST 요청을 처리합니다.</summary>
      <returns>클라이언트로 다시 전송할 응답 메시지입니다.</returns>
      <param name="entity">엔터티 집합에 삽입할 엔터티입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Put(`1,`0)">
      <summary>  엔터티 집합에서 단일 엔터티 대체를 시도하는 PUT 요청을 처리합니다.</summary>
      <returns>클라이언트로 다시 전송할 응답 메시지입니다.</returns>
      <param name="key">대체할 엔터티의 엔터티 키입니다.</param>
      <param name="update">업데이트된 엔터티입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.AsyncEntitySetController`2.QueryOptions">
      <summary>현재 요청의 OData 쿼리 옵션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.UpdateEntityAsync(`1,`0)">
      <summary>엔터티 집합에 있는 기존 엔터티를 업데이트하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>업데이트된 엔터티입니다.</returns>
      <param name="key">업데이트할 엔터티의 엔터티 키입니다.</param>
      <param name="update">업데이트된 엔터티입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.ClrTypeAnnotation">
      <summary>Represents a mapping from an <see cref="T:Microsoft.Data.Edm.IEdmType" /> to a CLR type.</summary>
    </member>
    <member name="M:System.Web.Http.OData.ClrTypeAnnotation.#ctor(System.Type)">
      <summary>Initializes a new instance of <see cref="T:System.Web.Http.OData.ClrTypeAnnotation" /> class.</summary>
      <param name="clrType">The backing CLR type for the EDM type.</param>
    </member>
    <member name="P:System.Web.Http.OData.ClrTypeAnnotation.ClrType">
      <summary>The backing CLR type for the EDM type.</summary>
    </member>
    <member name="T:System.Web.Http.OData.Delta`1">
      <summary>특정 <paramref name="TEntityType" />에 대한 변경(즉, 델타)을 추적하는 클래스입니다.</summary>
      <typeparam name="TEntityType">TEntityType은 이 델타가 변경을 추적하는 엔터티의 기본 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Delta`1" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Web.Http.OData.Delta`1" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="entityType">변경이 추적되는 파생된 엔터티 형식입니다. <paramref name="entityType" />을 <paramref name="TEntityType" />의 인스턴스에 할당할 수 있어야 합니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.Clear">
      <summary>델타를 지우고 기본 엔터티를 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.CopyChangedValues(`0)">
      <summary>기본 엔터티(<see cref="M:System.Web.Http.OData.Delta`1.GetEntity" />를 통해 액세스 가능)에서 변경된 속성 값을 <paramref name="original" /> 엔터티에 복사합니다.</summary>
      <param name="original">업데이트할 엔터티입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.CopyUnchangedValues(`0)">
      <summary>기본 엔터티(<see cref="M:System.Web.Http.OData.Delta`1.GetEntity" />를 통해 액세스 가능)에서 변경되지 않은 속성 값을 <paramref name="original" /> 엔터티에 복사합니다.</summary>
      <param name="original">업데이트할 엔터티입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Delta`1.EntityType">
      <summary>  변경이 추적되는 엔터티의 실제 형식입니다.</summary>
      <returns>
        <see cref="T:System.Type" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.GetChangedPropertyNames">
      <summary>열거 속성 이름으로 이 델타를 통해 수정된 속성을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.GetEntity">
      <summary>이 델타로 추적되는 모든 변경(및 원래 값)을 보유한 <see cref="P:System.Web.Http.OData.Delta`1.EntityType" /> 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.GetUnchangedPropertyNames">
      <summary>  열거 속성 이름으로 이 델타를 통해 수정되지 않은 속성을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.Patch(`0)">
      <summary>
        <paramref name="original" /> 엔터티를 이 델타로 추적된 변경으로 덮어씁니다. </summary>
      <param name="original">업데이트할 엔터티입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.Put(`0)">
      <summary>
        <paramref name="original" /> 엔터티를 이 델타로 저장된 값으로 덮어씁니다.</summary>
      <param name="original">업데이트할 엔터티입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>DynamicObject TryGetMember 메서드를 재정의하여 <see cref="P:System.Web.Http.OData.Delta`1.EntityType" />의 속성만 가져올 수 있습니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.TryGetPropertyType(System.String,System.Type@)">
      <summary>기본 엔터티에서 <paramref name="name" />이라는 속성의 <see cref="T:System.Type" />을 가져오려고 시도합니다.</summary>
      <returns>속성이 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">속성 이름입니다.</param>
      <param name="type">속성의 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.TryGetPropertyValue(System.String,System.Object@)">
      <summary>기본 엔터티에서 <paramref name="name" />이라는 속성 값을 가져오려고 시도합니다.</summary>
      <returns>속성이 있으면 true입니다.</returns>
      <param name="name">속성 이름입니다.</param>
      <param name="value">속성 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>DynamicObject TrySetMember 메서드를 재정의하여 <see cref="P:System.Web.Http.OData.Delta`1.EntityType" />의 속성만 설정할 수 있습니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.TrySetPropertyValue(System.String,System.Object)">
      <summary>
        <paramref name="name" />이라는 속성을 지정된 <paramref name="value" />로 설정하려고 시도합니다.</summary>
      <returns>성공하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">속성 이름입니다.</param>
      <param name="value">속성의 새 값입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.EntityInstanceContext">
      <summary>
        <see cref="T:System.Web.Http.OData.EntityInstanceContext`1" />의 인스턴스가 자체 링크(<see cref="M:EntitySetConfiguration.HasIdLink" /> , <see cref="M:EntitySetConfiguration.HasEditLink" />, <see cref="M:EntitySetConfiguration.HasReadLink" />) 및 탐색 링크(<see cref="M:EntitySetConfiguration.HasNavigationPropertyLink" />, <see cref="M:EntitySetConfiguration.HasNavigationPropertiesLink" />) 작성기에 전달되고 링크를 생성하기 위해 링크 작성기에 사용될 수 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.EntityInstanceContext.#ctor"></member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.EdmModel">
      <summary>
        <see cref="T:Microsoft.Data.Edm.IEdmModel" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmModel" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.EntityInstance">
      <summary>이 엔터티 인스턴스의 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Object" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.EntitySet">
      <summary>이 인스턴스가 속한 <see cref="T:Microsoft.Data.Edm.IEdmEntitySet" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmEntitySet" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.EntityType">
      <summary>이 엔터티 인스턴스의 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.Request">
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.SkipExpensiveAvailabilityChecks">
      <summary>ActionAvailabilityChecks를 수행해야 할지 여부를 가져옵니다. 작업에 대한 링크를 포함하기 전에 포맷터로 작업의 가용성을 확인할지 여부를 알리는 데 사용됩니다. 피드에 있는 경우 이 확인 과정을 건너뜁니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.Url">
      <returns>
        <see cref="T:System.Web.Http.Routing.UrlHelper" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.EntityInstanceContext`1">
      <summary>
        <see cref="T:System.Web.Http.OData.EntityInstanceContext`1" />의 인스턴스가 자체 링크(<see cref="M:EntitySetConfiguration.HasIdLink" /> , <see cref="M:EntitySetConfiguration.HasEditLink" />, <see cref="M:EntitySetConfiguration.HasReadLink" />) 및 탐색 링크(<see cref="M:EntitySetConfiguration.HasNavigationPropertyLink" />, <see cref="M:EntitySetConfiguration.HasNavigationPropertiesLink" />) 작성기에 전달되고 링크를 생성하기 위해 링크 작성기에 사용될 수 있습니다.</summary>
      <typeparam name="TEntityType">엔터티 형식</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.EntityInstanceContext`1.#ctor"></member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext`1.EntityInstance"></member>
    <member name="T:System.Web.Http.OData.EntitySetController`2">
      <summary>OData 엔터티 집합을 노출하는 컨트롤러에 편리한 시작점을 제공합니다. <see cref="T:System.Web.Http.OData.AsyncEntitySetController`2" />의 동기 버전입니다.</summary>
      <typeparam name="TEntity">노출된 엔터티 집합의 엔터티 형식과 연결된 형식입니다.</typeparam>
      <typeparam name="TKey">노출된 엔터티 집합 엔터티 형식의 엔터티 키와 연결된 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.#ctor"></member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.CreateEntity(`0)">
      <summary>  엔터티 집합에 새 엔터티를 만들려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>만들어진 엔터티입니다.</returns>
      <param name="entity">엔터티 집합에 추가할 엔터티입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.CreateLink(`1,System.String,System.Uri)">
      <summary>두 엔터티 사이에 링크 만들기를 시도하는 POST 및 PUT 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <param name="key">탐색 속성이 있는 엔터티의 키입니다.</param>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
      <param name="link">링크할 엔터티의 URI입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Delete(`1)">
      <summary>   엔터티 집합에서 기존 엔터티를 삭제하기 위한 DELETE 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <param name="key">삭제할 엔터티의 엔터티 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.DeleteLink(`1,System.String,System.String)">
      <summary>두 엔터티 사이에 관계 끊기를 시도하는 DELETE 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <param name="key">탐색 속성이 있는 엔터티의 키입니다.</param>
      <param name="relatedKey">관련 엔터티의 키입니다.</param>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.DeleteLink(`1,System.String,System.Uri)">
      <summary>  두 엔터티 사이에 관계 끊기를 시도하는 DELETE 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <param name="key">탐색 속성이 있는 엔터티의 키입니다.</param>
      <param name="navigationProperty">탐색 속성의 이름입니다.</param>
      <param name="link">탐색 속성에서 제거할 엔터티의 URI입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Get">
      <summary>엔터티 집합에서 엔터티 검색을 시도하는 GET 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>엔터티 집합에서 일치하는 엔터티입니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Get(`1)">
      <summary>엔터티 집합에서 키로 개별 엔터티 검색을 시도하는 GET 요청을 처리합니다.</summary>
      <returns>클라이언트로 다시 전송할 응답 메시지입니다.</returns>
      <param name="key">검색할 엔터티의 엔터티 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.GetEntityByKey(`1)">
      <summary>엔터티 집합에서 키로 엔터티를 검색하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>검색된 엔터티이거나 엔터티 집합에서 지정된 엔터티 키가 있는 엔터티를 찾을 수 없는 경우 null입니다.</returns>
      <param name="key">검색할 엔터티의 엔터티 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.GetKey(`0)">
      <summary>지정된 엔터티의 엔터티 키를 가져오려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>엔터티 키 값입니다.</returns>
      <param name="entity">엔터티입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.HandleUnmappedRequest(System.Web.Http.OData.Routing.ODataPath)">
      <summary>매핑되지 않은 모든 OData 요청을 처리하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>클라이언트로 다시 전송할 응답 메시지입니다.</returns>
      <param name="odataPath">요청의 OData 경로입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.EntitySetController`2.ODataPath">
      <summary>현재 요청의 OData 경로를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Routing.ODataPath" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Patch(`1,System.Web.Http.OData.Delta{`0})">
      <summary>   엔터티 집합에서 단일 엔터티를 부분적으로 업데이트하도록 PATCH 및 MERGE 요청을 처리합니다.</summary>
      <returns>클라이언트로 다시 전송할 응답 메시지입니다.</returns>
      <param name="key">업데이트할 엔터티의 엔터티 키입니다.</param>
      <param name="patch">부분적 업데이트를 나타내는 패치입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.PatchEntity(`1,System.Web.Http.OData.Delta{`0})">
      <summary>   엔터티 집합에 있는 기존 엔터티에 부분적 업데이트를 적용하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>업데이트된 엔터티입니다.</returns>
      <param name="key">업데이트할 엔터티의 엔터티 키입니다.</param>
      <param name="patch">부분적 업데이트를 나타내는 패치입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Post(`0)">
      <summary>엔터티 집합에 새 엔터티를 만드는 POST 요청을 처리합니다.</summary>
      <returns>클라이언트로 다시 전송할 응답 메시지입니다.</returns>
      <param name="entity">엔터티 집합에 삽입할 엔터티입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Put(`1,`0)">
      <summary>엔터티 집합에서 단일 엔터티 대체를 시도하는 PUT 요청을 처리합니다.</summary>
      <returns>클라이언트로 다시 전송할 응답 메시지입니다.</returns>
      <param name="key">대체할 엔터티의 엔터티 키입니다.</param>
      <param name="update">업데이트된 엔터티입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.EntitySetController`2.QueryOptions">
      <summary>  현재 요청의 OData 쿼리 옵션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.UpdateEntity(`1,`0)">
      <summary>   엔터티 집합에 있는 기존 엔터티를 업데이트하려면 이 메서드를 재정의해야 합니다.</summary>
      <returns>업데이트된 엔터티입니다.</returns>
      <param name="key">업데이트할 엔터티의 엔터티 키입니다.</param>
      <param name="update">업데이트된 엔터티입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.FeedContext">
      <summary>현재 직렬화 중인 피드에 대한 컨텍스트 정보를 포함합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.FeedContext.#ctor"></member>
    <member name="P:System.Web.Http.OData.FeedContext.EntitySet">
      <summary>이 인스턴스가 속한 <see cref="T:Microsoft.Data.Edm.IEdmEntitySet" />을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.FeedContext.FeedInstance">
      <summary>이 피드 인스턴스의 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.FeedContext.Request"></member>
    <member name="P:System.Web.Http.OData.FeedContext.Url"></member>
    <member name="T:System.Web.Http.OData.FromODataUriAttribute">
      <summary>OData 규칙을 사용하여 URI 매개 변수를 바인딩할 수 있는 <see cref="T:System.Web.Http.ParameterBindingAttribute" />의 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.FromODataUriAttribute.#ctor"></member>
    <member name="M:System.Web.Http.OData.FromODataUriAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>매개 변수에 대한 바인딩을 가져옵니다.</summary>
      <returns>바인딩이 포함된 <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />입니다.</returns>
      <param name="parameter">바인딩할 매개 변수입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.IDelta">
      <summary>개체에 대한 변경을 허용 및 추적합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.Clear">
      <summary>
        <see cref="T:System.Web.Http.OData.IDelta" />를 지웁니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.GetChangedPropertyNames">
      <summary>열거 가능한 속성 이름으로 이 IDelta를 통해 수정된 속성을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.GetUnchangedPropertyNames">
      <summary>열거 가능한 속성 이름으로 이 IDelta를 통해 수정되지 않은 속성을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.TryGetPropertyType(System.String,System.Type@)">
      <summary>기본 엔터티에서 <paramref name="name" />이라는 속성의 <see cref="T:System.Type" />을 가져오려고 시도합니다.</summary>
      <returns>속성이 있는 경우 true를, 없는 경우 false를 반환합니다.</returns>
      <param name="name">속성 이름</param>
      <param name="type">속성 형식</param>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.TryGetPropertyValue(System.String,System.Object@)">
      <summary>기본 엔터티에서 <paramref name="name" />이라는 속성 값을 가져오려고 시도합니다.</summary>
      <returns>속성이 있는 경우 true를, 없는 경우 false를 반환합니다.</returns>
      <param name="name">속성 이름</param>
      <param name="value">속성 값</param>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.TrySetPropertyValue(System.String,System.Object)">
      <summary>
        <paramref name="name" />이라는 속성을 지정된 <paramref name="value" />로 설정하려고 시도합니다.</summary>
      <returns>성공하면 true를, 실패하면 false를 반환합니다.</returns>
      <param name="name">속성 이름</param>
      <param name="value">속성의 새 값</param>
    </member>
    <member name="T:System.Web.Http.OData.ODataActionParameters">
      <summary>ActionPayload는 클라이언트가 특정 작업을 호출하기 위해 POST 요청에 제공한 매개 변수 이름 및 값을 보유합니다. 매개 변수 값은 매개 변수 이름을 사용하여 키가 지정된 사전에 저장됩니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataActionParameters.#ctor"></member>
    <member name="T:System.Web.Http.OData.ODataController">
      <summary>OData 형식을 사용한 데이터 쓰기 및 읽기를 지원하는 OData 컨트롤러의 기본 클래스를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataController.#ctor"></member>
    <member name="T:System.Web.Http.OData.ODataFormattingAttribute">
      <summary>     OData 포맷터를 활성화하는 컨트롤러에 배치할 특성입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataFormattingAttribute.#ctor"></member>
    <member name="M:System.Web.Http.OData.ODataFormattingAttribute.Initialize(System.Web.Http.Controllers.HttpControllerSettings,System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>컨트롤러에서 이 컨트롤러 설명자를 재정의할 때마다 설정할 수 있는 콜백이 호출됩니다.</summary>
      <param name="controllerSettings">초기화할 수 있는 컨트롤러 설정입니다.</param>
      <param name="controllerDescriptor">컨트롤러 설명자입니다. <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />는 <see cref="T:System.Web.Http.Controllers.IControllerConfiguration" />이 상속되도록 지정된 파생 컨트롤러 유형과 연관시킬 수 있습니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.ODataMetadataController">
      <summary>Represents an <see cref="T:System.Web.Http.ApiController" /> for generating OData servicedoc and metadata document ($metadata).</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataMetadataController.#ctor"></member>
    <member name="M:System.Web.Http.OData.ODataMetadataController.GetMetadata">
      <summary>Generates the OData $metadata document.</summary>
      <returns>The <see cref="T:Microsoft.Data.Edm.IEdmModel" /> representing $metadata.</returns>
    </member>
    <member name="M:System.Web.Http.OData.ODataMetadataController.GetServiceDocument">
      <summary>Generates the OData service document.</summary>
      <returns>The service document for the service.</returns>
    </member>
    <member name="T:System.Web.Http.OData.ODataQueryContext">
      <summary>쿼리 컴퍼지션을 수행하는 데 사용되는 컨텍스트 정보를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataQueryContext.#ctor(Microsoft.Data.Edm.IEdmModel,System.Type)">
      <summary>
        <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 및 요소 CLR 형식을 사용하여 <see cref="T:System.Web.Http.OData.ODataQueryContext" />의 인스턴스를 생성합니다.</summary>
      <param name="model">지정된 <paramref name="elementClrType" />에 해당하는 <see cref="T:Microsoft.Data.Edm.IEdmType" />을 포함하는 EdmModel입니다.</param>
      <param name="elementClrType">쿼리되는 컬렉션 요소의 CLR 형식입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.ODataQueryContext.ElementClrType">
      <summary>요소의 CLR 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Type" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.ODataQueryContext.ElementType">
      <summary>   요소의 <see cref="T:Microsoft.Data.Edm.IEdmType" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmType" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.ODataQueryContext.Model">
      <summary>EntitySet을 포함하는 지정된 <see cref="T:Microsoft.Data.Edm.IEdmModel" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmModel" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.ODataQueryParameterBindingAttribute">
      <summary>A <see cref="T:System.Web.Http.ParameterBindingAttribute" /> to bind parameters of type <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> to the OData query from the incoming request.</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataQueryParameterBindingAttribute.#ctor"></member>
    <member name="M:System.Web.Http.OData.ODataQueryParameterBindingAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)"></member>
    <member name="T:System.Web.Http.OData.ODataRoutingAttribute">
      <summary>라우팅 규칙에 따라 OData 작업 선택을 활성화하는 데 사용할 수 있는 컨트롤러 수준 특성을 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataRoutingAttribute.#ctor"></member>
    <member name="M:System.Web.Http.OData.ODataRoutingAttribute.Initialize(System.Web.Http.Controllers.HttpControllerSettings,System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>  컨트롤러에서 이 컨트롤러 설명자를 재정의할 때마다 설정할 수 있는 콜백이 호출됩니다.</summary>
      <param name="controllerSettings">초기화할 수 있는 컨트롤러 설정입니다.</param>
      <param name="controllerDescriptor">컨트롤러 설명자입니다. <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />는 <see cref="T:System.Web.Http.Controllers.IControllerConfiguration" />이 상속되도록 지정된 파생 컨트롤러 유형과 연관시킬 수 있습니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.PageResult">
      <summary>Represents a feed of entities that includes additional information that OData formats support.</summary>
    </member>
    <member name="M:System.Web.Http.OData.PageResult.#ctor(System.Uri,System.Nullable{System.Int64})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.OData.PageResult" /> class.</summary>
      <param name="nextPageLink">The link for the next page of items in the feed.</param>
      <param name="count">The total count of items in the feed.</param>
    </member>
    <member name="P:System.Web.Http.OData.PageResult.Count">
      <summary>Gets the total count of items in the feed.</summary>
      <returns>Returns <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="P:System.Web.Http.OData.PageResult.NextPageLink">
      <summary>Gets the link for the next page of items in the feed.</summary>
      <returns>Returns <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="T:System.Web.Http.OData.PageResult`1">
      <summary>PageResult는 OData 포맷에서 지원하는 추가 정보를 포함하는 엔터티의 피드입니다. 현재는 서버에서 일치하는 모든 엔터티 수($inlinecount=allpages를 사용하여 요청)와 다음 결과 페이지를 검색하는 NextLink(서버에서 서버 구동 페이징을 강제 적용하는 경우 추가됨)로 제한됩니다.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.PageResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Uri,System.Nullable{System.Int64})">
      <summary>서버 구동 페이징이 활성화된 경우 사용된 결과의 하위 집합을 만듭니다.</summary>
      <param name="items">이 페이지에서 직렬화되는 일치하는 결과의 하위 집합입니다.</param>
      <param name="nextPageLink">일치하는 결과의 다음 페이지에 대한 링크(더 존재하는 경우)</param>
      <param name="count">일치하는 총 결과 수이므로 클라이언트는 서버에서 일치하는 항목 수를 알 수 있습니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.PageResult`1.GetEnumerator">
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.PageResult`1.Items">
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.PageResult`1.System#Collections#IEnumerable#GetEnumerator">
      <returns>
        <see cref="T:System.Collections.IEnumerator" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ActionConfiguration">
      <summary> ActionConfiguration은 서비스를 통해 노출할 OData 작업을 나타냅니다.   ActionConfigurations는 &lt;FunctionImport /&gt; 요소로 $metadata를 통해 노출됩니다.   </summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.AddParameter(System.String,System.Web.Http.OData.Builder.IEdmTypeConfiguration)">
      <summary> 새로운 바인딩하지 않는 매개 변수를 추가합니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.BindingParameter">
      <summary> bindingParameter를 가져옵니다.   Null은 작업에 bindingParameter가 없음을 의미합니다.  </summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.CollectionParameter``1(System.String)">
      <summary> 새로운 바인딩하지 않는 컬렉션 매개 변수를 추가합니다. </summary>
      <typeparam name="TElementType"></typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.FollowsConventions"></member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.GetActionLink">
      <summary> 현재 등록된 작업 링크 팩터리를 검색합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.HasActionLink(System.Func{System.Web.Http.OData.EntityInstanceContext,System.Uri},System.Boolean)"></member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.IsAlwaysBindable">
      <summary> 이 작업을 항상 바인딩할 수 있는지 여부입니다. 예를 들어 Movie에 바인딩할 수 있는 Watch 작업을 생각해보면, 항상 Movie를 Watch할 수 있는 것은 아니며 이 경우 IsAlwaysBindable은 false를 반환합니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.IsBindable"></member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.Kind"></member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.Parameter``1(System.String)">
      <summary> 새로운 바인딩하지 않는 매개 변수를 추가합니다. </summary>
      <typeparam name="TParameter"></typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.Parameters"></member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.Returns``1">
      <summary> 작업의 반환 형식을 설정했습니다.  반환 형식이 단일 Primitive 또는 ComplexType인 경우 사용됩니다.  </summary>
      <typeparam name="TReturnType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.ReturnsCollection``1">
      <summary> 작업의 반환 형식을 설정합니다. 반환 형식이 Primitive 또는 ComplexTypes의 컬렉션인 경우 사용됩니다.  </summary>
      <typeparam name="TReturnElementType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.ReturnsCollectionFromEntitySet``1(System.String)">
      <summary> 반환 형식을 EntityType 인스턴스의 컬렉션으로 설정합니다. </summary>
      <param name="entitySetName">반환된 EntityType 인스턴스가 들어 있는 entitySetName입니다.</param>
      <typeparam name="TElementEntityType">EntityType인 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.ReturnsFromEntitySet``1(System.String)">
      <summary> 반환 형식을 단일 EntityType 인스턴스로 설정합니다. </summary>
      <param name="entitySetName">반환된 EntityType 인스턴스가 들어 있는 entitySetName입니다.</param>
      <typeparam name="TEntityType">EntityType인 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.SetBindingParameter(System.String,System.Web.Http.OData.Builder.IEdmTypeConfiguration,System.Boolean)">
      <summary> bindingParameter 이름, 형식 및 alwaysBindable인지 여부를 지정합니다. 작업이 "isBindable"인 경우에만 사용합니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ActionLinkBuilder">
      <summary> 작업에 주석을 지정하는 데 ActionLinkBuilder를 사용할 수 있습니다.  포맷터가 바인딩 작업을 호출하는 링크를 만드는 방식입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionLinkBuilder.#ctor(System.Func{System.Web.Http.OData.EntityInstanceContext,System.Uri},System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Builder.ActionLinkBuilder.BuildActionLink(System.Web.Http.OData.EntityInstanceContext)"></member>
    <member name="M:System.Web.Http.OData.Builder.ActionLinkBuilder.CreateActionLinkFactory(System.Func{System.Web.Http.OData.EntityInstanceContext,System.Uri},System.Func{System.Web.Http.OData.EntityInstanceContext,System.Boolean})">
      <summary> expensiveAvailabilityCheck에 따라 적절한 경우, 고비용의 확인 과정을 수행했는지에 관계없이 EntityInstanceContext.SkipExpensiveActionAvailabilityChecks 속성을 확인하여 작업 링크를 작성하는 작업 링크 팩터리를 만듭니다. </summary>
      <returns>새 작업 링크 팩터리입니다.</returns>
      <param name="baseFactory">모든 확인 과정을 거친 경우 실제로 링크를 작성하는 작업 링크 팩터리입니다.</param>
      <param name="expensiveAvailabilityCheck">가용성 확인 기능은 비용은 많이 들지만 호출할 경우 작업이 가능한지 여부를 반환합니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionLinkBuilder.FollowsConventions"></member>
    <member name="T:System.Web.Http.OData.Builder.BindingParameterConfiguration">
      <summary> BindingParameter를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.BindingParameterConfiguration.#ctor(System.String,System.Web.Http.OData.Builder.IEdmTypeConfiguration,System.Boolean)">
      <summary> BindingParameterConfiguration을 만듭니다. </summary>
      <param name="name">바인딩 매개 변수의 이름입니다.</param>
      <param name="parameterType">바인딩 매개 변수의 유형입니다.</param>
      <param name="alwaysBindable">바인딩 매개 변수의 인스턴스에 작업을 항상 바인딩할 수 있는지 여부입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.BindingParameterConfiguration.AlwaysBindable">
      <summary> BindingParameter를 항상 바인딩할 수 있는지 여부를 나타냅니다. 예를 들어 일부 작업은 항상 가능하지만 일부 작업은 특정 시간이나 특정 상황에서만 가능합니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.BindingParameterConfiguration.DefaultBindingParameterName"></member>
    <member name="T:System.Web.Http.OData.Builder.CollectionPropertyConfiguration">
      <summary>CollectionPropertyConfiguration은 EntityType 또는 ComplexType의 CollectionProperty를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.#ctor(System.Reflection.PropertyInfo,System.Web.Http.OData.Builder.StructuralTypeConfiguration)">
      <summary>제공된 <paramref name="property" />를 사용하여 CollectionPropertyConfiguration을 생성합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.ElementType">
      <summary>컬렉션에 있는 요소의 형식을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Type" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.IsOptional">
      <summary>CollectionProperty를 선택적으로 설정합니다(즉, null 허용).</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.CollectionPropertyConfiguration" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.IsRequired">
      <summary>CollectionProperty를 필수로 설정합니다(즉, null 허용 안 함).</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.CollectionPropertyConfiguration" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.Kind">
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.PropertyKind" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.RelatedClrType">
      <returns>
        <see cref="T:System.Type" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Builder.CollectionTypeConfiguration">
      <summary>일부 명명된 형식의 컬렉션을 나타냅니다(예: Collection(Namespace.Customer) 또는 Collection(Namespace.Address)).</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.CollectionTypeConfiguration.#ctor(System.Web.Http.OData.Builder.IEdmTypeConfiguration,System.Type)">
      <summary>지정된 ElementType 요소를 포함하고 지정된 clrType을 사용하여 .NET에 나타낸 컬렉션을 생성합니다.</summary>
      <param name="elementType">컬렉션에 있는 요소의 EdmTypeConfiguration입니다.</param>
      <param name="clrType">.NET에서 매니페스트되는 경우 이 컬렉션의 형식입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.ClrType">
      <returns>
        <see cref="T:System.Type" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.ElementType">
      <summary>이 컬렉션에 있는 요소의 EdmTypeConfiguration입니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.IEdmTypeConfiguration" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.FullName">
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.Kind">
      <returns>
        <see cref="T:Microsoft.Data.Edm.EdmTypeKind" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.ModelBuilder">
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.Name">
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.Namespace">
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ComplexPropertyConfiguration"></member>
    <member name="M:System.Web.Http.OData.Builder.ComplexPropertyConfiguration.#ctor(System.Reflection.PropertyInfo,System.Web.Http.OData.Builder.StructuralTypeConfiguration)">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.ComplexPropertyConfiguration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ComplexPropertyConfiguration.IsOptional"></member>
    <member name="M:System.Web.Http.OData.Builder.ComplexPropertyConfiguration.IsRequired"></member>
    <member name="P:System.Web.Http.OData.Builder.ComplexPropertyConfiguration.Kind"></member>
    <member name="P:System.Web.Http.OData.Builder.ComplexPropertyConfiguration.RelatedClrType"></member>
    <member name="T:System.Web.Http.OData.Builder.ComplexTypeConfiguration">
      <summary>모델의 복잡한 형식에 대해 구성을 수행할 수 있습니다. <see cref="M:System.Web.Http.OData.Builder.ODataModelBuilder.ComplexType``1" /> 메서드를 사용하여 ComplexTypeConfiguration을 가져올 수 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ComplexTypeConfiguration.#ctor"></member>
    <member name="M:System.Web.Http.OData.Builder.ComplexTypeConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,System.Type)"></member>
    <member name="P:System.Web.Http.OData.Builder.ComplexTypeConfiguration.Kind"></member>
    <member name="T:System.Web.Http.OData.Builder.ComplexTypeConfiguration`1">
      <summary>Represents an <see cref="T:Microsoft.Data.Edm.IEdmComplexType" /> that can be built using <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />.</summary>
      <typeparam name="TComplexType"></typeparam>
    </member>
    <member name="T:System.Web.Http.OData.Builder.EntityCollectionConfiguration`1">
      <summary>EntityCollectionConfiguration은 엔터티의 컬렉션을 나타냅니다. 컬렉션에 바인딩되는 작업처럼 엔터티에 바인딩할 항목을 구성하는 데 이 클래스를 사용할 수 있습니다.</summary>
      <typeparam name="TEntityType">EntityCollection의 ElementType인 EntityType입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityCollectionConfiguration`1.Action(System.String)">
      <summary>컬렉션에 바인딩할 새 작업을 만듭니다(EntityType).</summary>
      <returns>작업의 추가 구성을 허용하는 ActionConfiguration입니다.</returns>
      <param name="name">작업 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityCollectionConfiguration`1.TransientAction(System.String)">
      <summary>경우에 따라 컬렉션에 바인딩할 새 작업을 만듭니다(EntityType).</summary>
      <returns>작업의 추가 구성을 허용하는 ActionConfiguration입니다.</returns>
      <param name="name">작업 이름입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.EntitySetConfiguration">
      <summary>모델의 엔터티 집합에 대해 구성을 수행할 수 있습니다. <see cref="M:System.Web.Http.OData.Builder.ODataModelBuilder.EntitySet``1(System.String)" /> 메서드를 사용하여 <see cref="T:System.Web.Http.OData.Builder.EntitySetConfiguration" />을 가져올 수 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.#ctor"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,System.Type,System.String)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,System.Web.Http.OData.Builder.EntityTypeConfiguration,System.String)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.AddBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Web.Http.OData.Builder.EntitySetConfiguration)">
      <summary>지정된 탐색 속성을 대상 엔터티 집합에 바인딩합니다.</summary>
      <returns>추가로 구성할 수 있는 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBinding" />입니다.</returns>
      <param name="navigationConfiguration">탐색 속성입니다.</param>
      <param name="targetEntitySet">대상 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntitySetConfiguration.Bindings">
      <summary>이 엔터티 집합의 탐색 대상을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntitySetConfiguration.ClrType">
      <summary>이 엔터티 집합에 포함된 엔터티 형식에 대한 지원 CLR 형식을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntitySetConfiguration.EntityType">
      <summary>이 엔터티 집합에 포함된 엔터티 형식을 가져옵니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.FindBinding(System.String)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.FindBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.FindBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetEditLink">
      <summary>이 엔터티 집합에서 항목에 대한 편집 링크를 생성하는 데 사용되는 작성기를 가져옵니다.</summary>
      <returns>링크 작성기입니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetFeedSelfLink">
      <summary>이 엔터티 집합에서 피드에 대한 자체 링크를 생성하는 데 사용되는 작성기를 가져옵니다.</summary>
      <returns>링크 작성기입니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetIdLink">
      <summary>이 엔터티 집합에서 항목에 대한 ID를 생성하는 데 사용되는 작성기를 가져옵니다.</summary>
      <returns>작성기입니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetNavigationPropertyLink(System.Web.Http.OData.Builder.NavigationPropertyConfiguration)">
      <summary>이 엔터티 집합에서 항목에 대해 지정된 탐색 속성의 탐색 링크를 생성하는 데 사용되는 작성기를 가져옵니다.</summary>
      <returns>링크 작성기입니다.</returns>
      <param name="navigationProperty">탐색 속성입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetReadLink">
      <summary>이 엔터티 집합에서 항목에 대한 읽기 링크를 생성하는 데 사용되는 작성기를 가져옵니다.</summary>
      <returns>링크 작성기입니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetUrl"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasEditLink(System.Web.Http.OData.Builder.SelfLinkBuilder{System.Uri})"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasFeedSelfLink(System.Func{System.Web.Http.OData.FeedContext,System.Uri})">
      <summary>피드에 자체 링크를 추가합니다.</summary>
      <returns>현재 구성 중인 엔터티 집합 구성입니다.</returns>
      <param name="feedSelfLinkFactory">링크 URL을 생성하는 데 사용된 작성기입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasIdLink(System.Web.Http.OData.Builder.SelfLinkBuilder{System.String})"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasNavigationPropertiesLink(System.Collections.Generic.IEnumerable{System.Web.Http.OData.Builder.NavigationPropertyConfiguration},System.Web.Http.OData.Builder.NavigationLinkBuilder)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasNavigationPropertyLink(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Web.Http.OData.Builder.NavigationLinkBuilder)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasReadLink(System.Web.Http.OData.Builder.SelfLinkBuilder{System.Uri})"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasUrl(System.String)">
      <summary>엔터티 집합 URL을 구성합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
      <param name="url">엔터티 집합 URL입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntitySetConfiguration.Name">
      <summary>이 엔터티 집합의 이름을 가져옵니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.RemoveBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration)">
      <summary>지정된 탐색 속성에 대한 바인딩을 제거합니다.</summary>
      <param name="navigationConfiguration">탐색 속성입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.EntitySetConfiguration`1">
      <typeparam name="TEntityType"></typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntitySetConfiguration`1.EntityType"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.FindBinding(System.String)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.FindBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.FindBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasEditLink(System.Func{System.Web.Http.OData.EntityInstanceContext{`0},System.String},System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasEditLink(System.Func{System.Web.Http.OData.EntityInstanceContext{`0},System.Uri},System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasFeedSelfLink(System.Func{System.Web.Http.OData.FeedContext,System.String})">
      <summary> 피드에 자체 링크를 추가합니다. </summary>
      <param name="feedSelfLinkFactory">링크 URL을 생성하는 데 사용된 작성기입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasFeedSelfLink(System.Func{System.Web.Http.OData.FeedContext,System.Uri})">
      <summary> 피드에 자체 링크를 추가합니다. </summary>
      <param name="feedSelfLinkFactory">링크 URL을 생성하는 데 사용된 작성기입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasIdLink(System.Func{System.Web.Http.OData.EntityInstanceContext{`0},System.String},System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasManyBinding``2(System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0}}},System.String)">
      <typeparam name="TTargetType"></typeparam>
      <typeparam name="TDerivedEntityType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasManyBinding``2(System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0}}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <typeparam name="TTargetType"></typeparam>
      <typeparam name="TDerivedEntityType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasManyBinding``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.String)">
      <typeparam name="TTargetType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasManyBinding``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <typeparam name="TTargetType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasNavigationPropertiesLink(System.Collections.Generic.IEnumerable{System.Web.Http.OData.Builder.NavigationPropertyConfiguration},System.Func{System.Web.Http.OData.EntityInstanceContext{`0},Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri},System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasNavigationPropertyLink(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Func{System.Web.Http.OData.EntityInstanceContext{`0},Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri},System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasOptionalBinding``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.String)">
      <typeparam name="TTargetType"></typeparam>
      <typeparam name="TDerivedEntityType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasOptionalBinding``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <typeparam name="TTargetType"></typeparam>
      <typeparam name="TDerivedEntityType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasOptionalBinding``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <typeparam name="TTargetType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasOptionalBinding``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <typeparam name="TTargetType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasReadLink(System.Func{System.Web.Http.OData.EntityInstanceContext{`0},System.String},System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasReadLink(System.Func{System.Web.Http.OData.EntityInstanceContext{`0},System.Uri},System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasRequiredBinding``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.String)">
      <typeparam name="TTargetType"></typeparam>
      <typeparam name="TDerivedEntityType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasRequiredBinding``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <typeparam name="TTargetType"></typeparam>
      <typeparam name="TDerivedEntityType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasRequiredBinding``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <typeparam name="TTargetType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasRequiredBinding``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <typeparam name="TTargetType"></typeparam>
    </member>
    <member name="T:System.Web.Http.OData.Builder.EntityTypeConfiguration">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />를 사용하여 작성할 수 있는 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.#ctor"></member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,System.Type)"></member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.Abstract">
      <summary>이 엔터티 형식을 추상으로 표시합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.AddCollectionProperty(System.Reflection.PropertyInfo)">
      <summary>이 엔터티 형식에 새 EDM 컬렉션 속성을 추가합니다.</summary>
      <returns>추가된 속성의 <see cref="T:System.Web.Http.OData.Builder.CollectionPropertyConfiguration" />을 반환합니다.</returns>
      <param name="propertyInfo">지원 CLR 속성입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.AddComplexProperty(System.Reflection.PropertyInfo)">
      <summary>이 엔터티 형식에 새 EDM 복합 속성을 추가합니다.</summary>
      <returns>추가된 속성의 <see cref="T:System.Web.Http.OData.Builder.ComplexPropertyConfiguration" />을 반환합니다.</returns>
      <param name="propertyInfo">지원 CLR 속성입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.AddNavigationProperty(System.Reflection.PropertyInfo,Microsoft.Data.Edm.EdmMultiplicity)">
      <summary>이 엔터티 형식에 새 EDM 탐색 속성을 추가합니다.</summary>
      <returns>추가된 속성의 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyConfiguration" />을 반환합니다.</returns>
      <param name="navigationProperty">지원 CLR 속성입니다.</param>
      <param name="multiplicity">탐색 속성의 <see cref="T:Microsoft.Data.Edm.EdmMultiplicity" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.AddProperty(System.Reflection.PropertyInfo)">
      <summary>이 엔터티 형식에 새 EDM 기본 속성을 추가합니다.</summary>
      <returns>추가된 속성의 <see cref="T:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration" />을 반환합니다.</returns>
      <param name="propertyInfo">지원 CLR 속성입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.BaseType">
      <summary>이 엔터티 형식의 기본 형식을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.EntityTypeConfiguration" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.BaseTypeConfigured">
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.DerivesFrom(System.Web.Http.OData.Builder.EntityTypeConfiguration)">
      <summary>이 엔터티 형식의 기본 형식을 설정합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
      <param name="baseType">기본 엔터티 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.DerivesFromNothing">
      <summary>이 엔터티 형식의 기본 형식을 null로 설정합니다. 즉, 이 엔터티 형식은 어디에서도 파생되지 않음을 의미합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
      <summary>이 엔터티 형식의 키 속성을 구성합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
      <param name="keyProperty">이 엔터티 형식의 키 속성에 추가할 속성입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.IsAbstract">
      <summary>이 형식이 추상인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.Keys">
      <summary>이 엔터티 형식의 키 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.Kind">
      <summary>이 <see cref="T:System.Web.Http.OData.Builder.IEdmTypeConfiguration" />의 <see cref="T:Microsoft.Data.Edm.EdmTypeKind" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.EdmTypeKind" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.NavigationProperties">
      <summary>이 엔터티 형식의 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyConfiguration" /> 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.RemoveKey(System.Web.Http.OData.Builder.PrimitivePropertyConfiguration)">
      <summary>엔터티 키 컬렉션에서 속성을 제거합니다.</summary>
      <param name="keyProperty">제거할 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.RemoveProperty(System.Reflection.PropertyInfo)"></member>
    <member name="T:System.Web.Http.OData.Builder.EntityTypeConfiguration`1">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />를 사용하여 작성할 수 있는 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />을 나타냅니다.</summary>
      <typeparam name="TEntityType">이 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />에 대한 지원 CLR 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.Abstract">
      <summary>이 엔터티 형식을 추상으로 표시합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.Action(System.String)">
      <summary>이 EntityType을 바인딩하는 작업을 만듭니다.</summary>
      <returns>새 작업의 추가 구성을 허용하는 ActionConfiguration입니다.</returns>
      <param name="name">작업 이름입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.BaseType">
      <summary>이 엔터티 형식의 기본 형식을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.Collection">
      <summary>EntityCollections에 바인딩할 수 있는 작업을 구성할 수 있는 엔터티 컬렉션에 액세스하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.DerivesFrom``1">
      <summary>이 엔터티 형식의 기본 형식을 설정합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
      <typeparam name="TBaseType">기본 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.DerivesFromNothing">
      <summary>이 엔터티 형식의 기본 형식을 null로 설정합니다. 즉, 이 엔터티 형식은 어디에서도 파생되지 않음을 의미합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티 형식의 키 속성을 구성합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
      <param name="keyDefinitionExpression">기본 키로 사용할 속성을 나타내는 람다 식입니다. 예를 들어 C#에서는 t =&amp;gt; t.Id이고 Visual Basic .Net 함수에서는 t.Id입니다.</param>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
      <summary>이 엔터티 형식에서 여러 관계를 구성합니다.</summary>
      <returns>관계의 추가 구성에 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 C#에서는 t =&amp;gt; t.MyProperty이고 Visual Basic .Net 함수에서는 t.MyProperty입니다.</param>
      <typeparam name="TTargetEntity">관계의 다른 쪽 끝에 있는 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티 형식에서 선택적 관계를 구성합니다.</summary>
      <returns>관계의 추가 구성에 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 C#에서는 t =&amp;gt; t.MyProperty이고 Visual Basic .Net 함수에서는 t.MyProperty입니다.</param>
      <typeparam name="TTargetEntity">관계의 다른 쪽 끝에 있는 엔터티 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>이 엔터티 형식에서 필요한 관계를 구성합니다.</summary>
      <returns>관계의 추가 구성에 사용할 수 있는 구성 개체입니다.</returns>
      <param name="navigationPropertyExpression">관계에 대한 탐색 속성을 나타내는 람다 식입니다. 예를 들어 C#에서는 t =&amp;gt; t.MyProperty이고 Visual Basic .Net 함수에서는 t.MyProperty입니다.</param>
      <typeparam name="TTargetEntity">관계의 다른 쪽 끝에 있는 엔터티 형식입니다.</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.NavigationProperties">
      <summary>이 엔터티 형식의 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyConfiguration" /> 컬렉션을 가져옵니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.TransientAction(System.String)">
      <summary>경우에 따라 이 EntityType을 바인딩하는 작업을 만듭니다.</summary>
      <returns>새 '임시' 작업의 추가 구성을 허용하는 ActionConfiguration입니다.</returns>
      <param name="name">작업 이름입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.IEdmTypeConfiguration">
      <summary>EdmType을 나타냅니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.ClrType">
      <summary>EdmType과 연결된 .NET 형식입니다.</summary>
      <returns>
        <see cref="T:System.Type" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.FullName">
      <summary>네임스페이스를 포함한 EdmType의 전체 이름입니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.Kind">
      <summary>EdmType의 종류입니다. EntityType, ComplexType, PrimitiveType, CollectionType 등이 있습니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.EdmTypeKind" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.ModelBuilder">
      <summary>이 IEdmType을 만드는 데 사용된 ODataModelBuilder입니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.Name">
      <summary>EdmType의 이름입니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.Namespace">
      <summary>EdmType의 네임스페이스입니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Builder.NavigationLinkBuilder"></member>
    <member name="M:System.Web.Http.OData.Builder.NavigationLinkBuilder.#ctor(System.Func{System.Web.Http.OData.EntityInstanceContext,Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri},System.Boolean)">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.NavigationLinkBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationLinkBuilder.Factory"></member>
    <member name="P:System.Web.Http.OData.Builder.NavigationLinkBuilder.FollowsConventions"></member>
    <member name="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration">
      <summary>Used to configure the binding for a navigation property for an entity set. This configuration functionality is exposed by the model builder Fluent API, see <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration.#ctor(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Web.Http.OData.Builder.EntitySetConfiguration)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration" /> class.</summary>
      <param name="navigationProperty">The navigation property for the binding.</param>
      <param name="entitySet">The target entity set of the binding.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration.EntitySet">
      <summary>Gets the target entity set of the binding.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration.NavigationProperty">
      <summary>Gets the navigation property of the binding.</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.NavigationPropertyConfiguration"></member>
    <member name="M:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.#ctor(System.Reflection.PropertyInfo,Microsoft.Data.Edm.EdmMultiplicity,System.Web.Http.OData.Builder.EntityTypeConfiguration)">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyConfiguration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.DeclaringEntityType"></member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.Kind"></member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.Multiplicity"></member>
    <member name="M:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.Optional"></member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.RelatedClrType"></member>
    <member name="M:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.Required"></member>
    <member name="T:System.Web.Http.OData.Builder.NonbindingParameterConfiguration">
      <summary> 바인딩되지 않는 프로시저 매개 변수를 나타냅니다.   바인딩되지 않는 매개 변수는 작업의 POST 본문에 제공됩니다. 바인딩되지 않는 매개 변수는 함수에 대해 - ~/.../Function(p1=value) - ~/.../Function(p1=@x)?@x=value - ~/.../Function?p1=value의 3가지 방법으로 제공됩니다(함수가 마지막 URL 경로 세그먼트인 경우에만 허용).   </summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.NonbindingParameterConfiguration.#ctor(System.String,System.Web.Http.OData.Builder.IEdmTypeConfiguration)">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.NonbindingParameterConfiguration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.Conventions.IConvention" />의 집합에 따라 CLR 클래스를 EDM 모델에 자동으로 매핑하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.#ctor">
      <summary>새 <see cref="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder" />를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>새 <see cref="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder" />를 초기화합니다.</summary>
      <param name="configuration">사용할 <see cref="T:System.Web.Http.HttpConfiguration" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.AddComplexType(System.Type)">
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.ComplexTypeConfiguration" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.AddEntity(System.Type)">
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.EntityTypeConfiguration" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.AddEntitySet(System.String,System.Web.Http.OData.Builder.EntityTypeConfiguration)">
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.EntitySetConfiguration" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.GetEdmModel">
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmModel" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.Ignore``1">
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder" />을 반환합니다.</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.Ignore(System.Type[])">
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataConventionModelBuilder.OnModelCreating">
      <summary>이 작업은 <see cref="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder" />에서 모든 규칙을 실행한 후, 구성이 잠기고 <see cref="T:Microsoft.Data.Edm.IEdmModel" />을 작성하는 데 사용되기 전에 호출됩니다.</summary>
      <returns>
        <see cref="T:System.Action`1" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ODataModelBuilder">
      <summary>CLR 클래스를 EDM 모델에 매핑합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.#ctor"></member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.Action(System.String)">
      <summary>작성기에 바인딩할 수 없는 작업을 추가합니다.</summary>
      <returns>지정된 작업에 대한 구성 개체입니다.</returns>
      <param name="name">작업 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.AddComplexType(System.Type)">
      <summary>복합 형식을 모델의 일부로 등록하고 엔터티를 구성하는 데 사용할 수 있는 개체를 반환합니다. 이 메서드는 여러 줄의 구성을 수행하기 위해 동일한 엔터티에 대해 여러 번 호출할 수 있습니다.</summary>
      <returns>지정된 복합 형식에 대한 구성 개체입니다.</returns>
      <param name="type">등록 또는 구성할 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.AddEntity(System.Type)">
      <summary>엔터티 형식을 모델의 일부로 등록하고 엔터티를 구성하는 데 사용할 수 있는 개체를 반환합니다. 이 메서드는 여러 줄의 구성을 수행하기 위해 동일한 엔터티에 대해 여러 번 호출할 수 있습니다.</summary>
      <returns>지정된 엔터티 형식에 대한 구성 개체입니다.</returns>
      <param name="type">등록 또는 구성할 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.AddEntitySet(System.String,System.Web.Http.OData.Builder.EntityTypeConfiguration)">
      <summary>엔터티 집합을 모델의 일부로 등록하고 엔터티 집합을 구성하는 데 사용할 수 있는 개체를 반환합니다. 이 메서드는 여러 줄의 구성을 수행하기 위해 동일한 형식에 대해 여러 번 호출할 수 있습니다.</summary>
      <returns>지정된 엔터티 집합에 대한 구성 개체입니다.</returns>
      <param name="name">엔터티 집합의 이름입니다.</param>
      <param name="entityType">등록 또는 구성할 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.AddProcedure(System.Web.Http.OData.Builder.ProcedureConfiguration)">
      <summary>프로시저를 모델에 추가합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.ComplexType``1">
      <summary>모델에서 형식을 복합 형식으로 등록하고 복합 형식을 구성하는 데 사용할 수 있는 개체를 반환합니다. 이 메서드는 여러 줄의 구성을 수행하기 위해 동일한 형식에 대해 여러 번 호출할 수 있습니다.</summary>
      <returns>지정된 복합 형식에 대한 구성 개체입니다.</returns>
      <typeparam name="TComplexType">등록 또는 구성할 형식입니다.</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.ContainerName">
      <summary>EntitySets, Actions 및 Functions를 모두 포함하는 컨테이너의 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.DataServiceVersion">
      <summary>모델의 데이터 서비스 버전을 가져오거나 설정합니다. 기본값은 3.0입니다.</summary>
      <returns>
        <see cref="T:System.Version" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.Entity``1">
      <summary>엔터티 형식을 모델의 일부로 등록하고 엔터티를 구성하는 데 사용할 수 있는 개체를 반환합니다. 이 메서드는 여러 줄의 구성을 수행하기 위해 동일한 엔터티에 대해 여러 번 호출할 수 있습니다.</summary>
      <returns>지정된 엔터티 형식에 대한 구성 개체입니다.</returns>
      <typeparam name="TEntityType">등록 또는 구성할 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.EntitySet``1(System.String)">
      <summary>엔터티 집합을 모델의 일부로 등록하고 엔터티 집합을 구성하는 데 사용할 수 있는 개체를 반환합니다. 이 메서드는 여러 줄의 구성을 수행하기 위해 동일한 형식에 대해 여러 번 호출할 수 있습니다.</summary>
      <returns>지정된 엔터티 집합에 대한 구성 개체입니다.</returns>
      <param name="name">엔터티 집합의 이름입니다.</param>
      <typeparam name="TEntityType">엔터티 집합의 엔터티 형식입니다.</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.EntitySets">
      <summary>모델에서 작성할 EDM 엔터티 집합의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.GetEdmModel">
      <summary>이 작성기를 사용하여 수행한 구성에 따라 <see cref="T:Microsoft.Data.Edm.IEdmModel" />을 만듭니다.</summary>
      <returns>작성된 모델입니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.GetTypeConfigurationOrNull(System.Type)">
      <summary>T와 일치하는 미리 구성된 구조적 형식 또는 기본 형식을 찾으려고 합니다. 일치하는 항목이 없는 경우 NULL이 반환됩니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.IEdmTypeConfiguration" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.MaxDataServiceVersion">
      <summary>모델의 최대 데이터 서비스 버전을 가져오거나 설정합니다. 기본값은 3.0입니다.</summary>
      <returns>
        <see cref="T:System.Version" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.Namespace">
      <summary>결과 모델에 사용할 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.Procedures">
      <summary>모델에서 작성할 프로시저의 컬렉션을 가져옵니다(즉, Actions, Functions 및 ServiceOperations).</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.RemoveEntitySet(System.String)">
      <summary>모델에서 엔터티 집합을 제거합니다.</summary>
      <returns>엔터티 집합이 모델에 있는 경우 <see cref="" />이고 그렇지 않은 경우 <see cref="" />입니다.</returns>
      <param name="name">제거할 엔터티 집합의 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.RemoveProcedure(System.String)">
      <summary>      모델에서 프로시저를 제거합니다.</summary>
      <returns>프로시저가 모델에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">제거할 프로시저의 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.RemoveProcedure(System.Web.Http.OData.Builder.ProcedureConfiguration)">
      <summary>모델에서 프로시저를 제거합니다.</summary>
      <returns>프로시저가 모델에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="procedure">제거할 프로시저입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.RemoveStructuralType(System.Type)">
      <summary>모델에서 형식을 제거합니다.</summary>
      <returns>형식이 모델에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="type">제거할 형식입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.StructuralTypes">
      <summary>모델에서 작성할 EDM 형식의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ParameterConfiguration">
      <summary>프로시저에 대한 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ParameterConfiguration.#ctor(System.String,System.Web.Http.OData.Builder.IEdmTypeConfiguration)"></member>
    <member name="P:System.Web.Http.OData.Builder.ParameterConfiguration.Name">
      <summary>매개 변수의 이름입니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ParameterConfiguration.TypeConfiguration">
      <summary>매개 변수의 유형입니다.</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration">
      <summary>엔터티 형식 또는 복합 형식의 기본 속성을 구성하는 데 사용됩니다. 이 구성 기능은 모델 작성기 Fluent API에 의해 노출되며 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />를 참조합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration.#ctor(System.Reflection.PropertyInfo,System.Web.Http.OData.Builder.StructuralTypeConfiguration)"></member>
    <member name="M:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration.IsOptional">
      <summary>선택적 속성을 구성합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration.IsRequired">
      <summary>필수인 속성을 구성합니다.</summary>
      <returns>자체 반환하여 여러 호출을 체인화할 수 있습니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration.Kind"></member>
    <member name="P:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration.RelatedClrType"></member>
    <member name="T:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration">
      <summary>PrimitiveType을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,Microsoft.Data.Edm.IEdmPrimitiveType,System.Type)">
      <summary>이 생성자는 단위 테스트를 위해 공용으로만 사용됩니다. PrimitiveTypeConfiguration을 가져오려면 ODataModelBuilder.GetTypeConfigurationOrNull(Type)을 사용합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.ClrType"></member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.EdmPrimitiveType">
      <summary>이 PrimitiveTypeConfiguration과 연결된 IEdmPrimitiveType을 반환합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.FullName"></member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.Kind"></member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.ModelBuilder"></member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.Name"></member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.Namespace"></member>
    <member name="T:System.Web.Http.OData.Builder.ProcedureConfiguration">
      <summary>모델에서 노출되는 프로시저를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ProcedureConfiguration.#ctor"></member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.ContainerQualifiedName">
      <summary>OData URL에 사용되는 경우 프로시저의 정규화된 이름입니다. 프로시저와 기타 가능한 단일 부분 식별자를 구분하기 위한 자격이 필요합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.EntitySet">
      <summary>엔터티가 반환된 EntitySet입니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.FullName">
      <summary>FullName은 ContainerQualifiedName입니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.FullyQualifiedName">
      <summary>FullyQualifiedName은 네임스페이스를 사용하여 자세히 정규화된 ContainerQualifiedName입니다. 일반적으로 대부분의 서비스에 같은 이름의 컨테이너가 하나만 있으므로 필수가 아닙니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.IsAlwaysBindable">
      <summary>프로시저가 IsBindable인 경우 항상 바인딩 가능합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.IsBindable">
      <summary>프로시저를 BindingParameter를 나타내는 url에 바인딩할 수 있습니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.IsComposable">
      <summary>프로시저를 구성할 수 있습니다. 예를 들어 해당 프로시저를 호출하는 URL을 프로시저를 호출하고 결과로 다른 작업을 수행하는 요청에 대한 기본 URL로 사용할 수 있습니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.IsSideEffecting">
      <summary>프로시저에는 부작용이 있습니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.Kind">
      <summary>Action, Function 또는 ServiceOperation일 수 있는 프로시저 종류입니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.ModelBuilder"></member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.Name">
      <summary>프로시저 이름입니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.Parameters">
      <summary>프로시저에서 사용하는 매개 변수입니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.ReturnType">
      <summary>프로시저가 호출될 때 반환된 형식입니다.</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ProcedureKind">
      <summary>OData 프로시저의 종류입니다. Action, Function 또는 ServiceOperation 중 하나입니다.</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.ProcedureKind.Action">
      <summary />
    </member>
    <member name="F:System.Web.Http.OData.Builder.ProcedureKind.Function">
      <summary />
    </member>
    <member name="F:System.Web.Http.OData.Builder.ProcedureKind.ServiceOperation">
      <summary />
    </member>
    <member name="T:System.Web.Http.OData.Builder.PropertyConfiguration">
      <summary>모든 속성 구성에 대한 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.PropertyConfiguration.#ctor(System.Reflection.PropertyInfo,System.Web.Http.OData.Builder.StructuralTypeConfiguration)"></member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.AddedExplicitly">
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.DeclaringType">
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.StructuralTypeConfiguration" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.Kind">
      <summary>속성의 <see cref="T:System.Web.Http.OData.Builder.PropertyKind" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.PropertyKind" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.Name">
      <summary>속성의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.PropertyInfo">
      <summary>매핑 CLR <see cref="P:System.Web.Http.OData.Builder.PropertyConfiguration.PropertyInfo" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.RelatedClrType">
      <summary>속성의 CLR <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Type" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Builder.PropertyKind"></member>
    <member name="F:System.Web.Http.OData.Builder.PropertyKind.Primitive">
      <summary>.</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.PropertyKind.Complex">
      <summary>.</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.PropertyKind.Collection">
      <summary>.</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.PropertyKind.Navigation">
      <summary>.</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.SelfLinkBuilder`1">
      <summary> 자체 링크 팩터리와 링크 팩터리가 규칙을 따르는지 여부를 캡슐화합니다. </summary>
      <typeparam name="T">생성된 자체 링크의 형식입니다. ID 링크와 읽기 및 편집 링크에 대한 형식이어야 합니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.SelfLinkBuilder`1.#ctor(System.Func{System.Web.Http.OData.EntityInstanceContext,`0},System.Boolean)">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.SelfLinkBuilder`1" />의 새 인스턴스를 생성합니다. </summary>
      <param name="linkFactory">링크 팩터리입니다.</param>
      <param name="followsConventions">팩터리가 링크 생성을 위한 OData 규칙을 따르는지 여부입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.SelfLinkBuilder`1.Factory">
      <summary> 링크 생성을 위한 팩터리를 가져옵니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.SelfLinkBuilder`1.FollowsConventions">
      <summary> 링크 팩터리가 OData 규칙을 따르는지 여부를 나타내는 부울 값을 가져옵니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.StructuralPropertyConfiguration">
      <summary>모든 구조적 속성 구성에 대한 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralPropertyConfiguration.#ctor(System.Reflection.PropertyInfo,System.Web.Http.OData.Builder.StructuralTypeConfiguration)"></member>
    <member name="P:System.Web.Http.OData.Builder.StructuralPropertyConfiguration.OptionalProperty"></member>
    <member name="T:System.Web.Http.OData.Builder.StructuralTypeConfiguration">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />를 사용하여 작성할 수 있는 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" />을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.#ctor"></member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,System.Type)"></member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.AddCollectionProperty(System.Reflection.PropertyInfo)">
      <summary>이 edm 형식에 컬렉션 속성을 추가합니다.</summary>
      <returns>속성을 추가로 구성할 수 있는 <see cref="T:System.Web.Http.OData.Builder.CollectionPropertyConfiguration" />입니다.</returns>
      <param name="propertyInfo">추가 중인 속성입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.AddComplexProperty(System.Reflection.PropertyInfo)">
      <summary>이 edm 형식에 복합 속성을 추가합니다.</summary>
      <returns>속성을 추가로 구성할 수 있는 <see cref="T:System.Web.Http.OData.Builder.ComplexPropertyConfiguration" />입니다.</returns>
      <param name="propertyInfo">추가 중인 속성입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.AddProperty(System.Reflection.PropertyInfo)">
      <summary>이 edm 형식에 기본 속성을 추가합니다.</summary>
      <returns>속성을 추가로 구성할 수 있는 <see cref="T:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration" />입니다.</returns>
      <param name="propertyInfo">추가 중인 속성입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.ClrType">
      <summary>지원 CLR <see cref="T:System.Type" />을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.ExplicitProperties"></member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.FullName">
      <summary>이 edm 형식의 전체 이름을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.IgnoredProperties">
      <summary>이 edm 형식에서 무시될 지원 CLR 형식에서 속성을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.Kind">
      <summary>이 edm 형식의 <see cref="T:Microsoft.Data.Edm.EdmTypeKind" />를 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.ModelBuilder">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />입니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.Name">
      <summary>이 edm 형식의 이름을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.Namespace">
      <summary>이 edm 형식의 네임스페이스를 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.Properties">
      <summary>이 edm 형식에 선언된 속성을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.RemovedProperties"></member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.RemoveProperty(System.Reflection.PropertyInfo)">
      <summary>지정된 속성을 제거합니다.</summary>
      <param name="propertyInfo">제거 중인 속성입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1">
      <typeparam name="TStructuralType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.#ctor(System.Web.Http.OData.Builder.StructuralTypeConfiguration)">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.CollectionProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
      <typeparam name="TElementType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <typeparam name="TComplexType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <typeparam name="TProperty"></typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Properties"></member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})"></member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.IO.Stream}})"></member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})"></member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter">
      <summary>OData를 처리할 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> 클래스입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.CanReadType(System.Type)">
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.CanWriteType(System.Type)">
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.MessageReaderQuotas">
      <summary>이 포맷터에서 읽기 쪽에서 사용할 <see cref="T:Microsoft.Data.OData.ODataMessageQuotas" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.OData.ODataMessageQuotas" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.MessageWriterQuotas">
      <summary>이 포맷터에서 쓰기 쪽에서 사용할 <see cref="T:Microsoft.Data.OData.ODataMessageQuotas" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.OData.ODataMessageQuotas" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)"></member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.ODataMediaTypeFormatters">
      <summary>OData를 처리할 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> 클래스입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatters.Create">
      <summary>OData를 처리할 미디어 유형 포맷터 집합을 만듭니다.</summary>
      <returns>OData를 처리할 미디어 유형 포맷터 집합입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.ODataModelBinderProvider">
      <summary>EDM 기본 형식에 대한 <see cref="T:System.Web.Http.ModelBinding.IModelBinder" />를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataModelBinderProvider.#ctor"></member>
    <member name="M:System.Web.Http.OData.Formatter.ODataModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)"></member>
    <member name="T:System.Web.Http.OData.Query.AllowedArithmeticOperators">
      <summary> $filter를 사용한 쿼리에 허용할 산술 연산자입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.None">
      <summary> $filter에서 산술 연산자를 허용하지 않는 것에 해당하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.Add">
      <summary> $filter에서 'Add' 산술 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.Subtract">
      <summary> $filter에서 'Subtract' 산술 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.Multiply">
      <summary> $filter에서 'Multiply' 산술 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.Divide">
      <summary> $filter에서 'Divide' 산술 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.Modulo">
      <summary> $filter에서 'Modulo' 산술 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.All">
      <summary> $filter에서 모든 산술 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.AllowedFunctions">
      <summary> $filter를 사용한 쿼리에 허용할 함수입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.None">
      <summary> $filter에서 함수를 허용하지 않는 것에 해당하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.StartsWith">
      <summary> $filter에서 'StartsWith' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.EndsWith">
      <summary> $filter에서 'EndsWith' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.SubstringOf">
      <summary> $filter에서 'SubstringOf' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Length">
      <summary> $filter에서 'Length' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.IndexOf">
      <summary> $filter에서 'IndexOf' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Concat">
      <summary> $filter에서 'Concat' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Substring">
      <summary> $filter에서 'Substring' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.ToLower">
      <summary> $filter에서 'ToLower' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.ToUpper">
      <summary> $filter에서 'ToUpper' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Trim">
      <summary> $filter에서 'Trim' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Cast">
      <summary> $filter에서 'Cast' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Year">
      <summary> $filter에서 'Year' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Years">
      <summary> $filter에서 'Years' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Month">
      <summary> $filter에서 'Month' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Months">
      <summary> $filter에서 'Months' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Day">
      <summary> $filter에서 'Day' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Days">
      <summary> $filter에서 'Days' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Hour">
      <summary> $filter에서 'Hour' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Hours">
      <summary> $filter에서 'Hours' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Minute">
      <summary> $filter에서 'Minute' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Minutes">
      <summary> $filter에서 'Minutes' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Second">
      <summary> $filter에서 'Second' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Seconds">
      <summary> $filter에서 'Seconds' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Round">
      <summary> $filter에서 'Round' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Floor">
      <summary> $filter에서 'Floor' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Ceiling">
      <summary> $filter에서 'Ceiling' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.IsOf">
      <summary> $filter에서 'IsOf' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Any">
      <summary> $filter에서 'Any' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.All">
      <summary> $filter에서 'All' 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.AllStringFunctions">
      <summary> $filter에서 모든 문자열 관련 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.AllDateTimeFunctions">
      <summary> $filter에서 모든 날짜/시간 관련 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.AllMathFunctions">
      <summary> $filter에서 산술 관련 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.AllFunctions">
      <summary> $filter에서 모든 함수를 허용하는 값입니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.AllowedLogicalOperators">
      <summary> $filter를 사용한 쿼리에 허용할 논리 연산자입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.None">
      <summary> $filter에서 논리 연산자를 허용하지 않는 것에 해당하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.Or">
      <summary> $filter에서 'Or' 논리 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.And">
      <summary> $filter에서 'And' 논리 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.Equal">
      <summary> $filter에서 'Equal' 논리 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.NotEqual">
      <summary> $filter에서 'NotEqual' 논리 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.GreaterThan">
      <summary> $filter에서 'GreaterThan' 논리 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.GreaterThanOrEqual">
      <summary> $filter에서 'GreaterThanOrEqual' 논리 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.LessThan">
      <summary> $filter에서 'LessThan' 논리 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.LessThanOrEqual">
      <summary> $filter에서 'LessThanOrEqual' 논리 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.Not">
      <summary> $filter에서 'Not' 논리 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.All">
      <summary> $filter에서 모든 논리 연산자를 허용하는 값입니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.AllowedQueryOptions">
      <summary> 쿼리에 허용할 OData 쿼리 옵션입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.None">
      <summary> 쿼리 옵션을 허용하지 않는 것에 해당하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Filter">
      <summary> $filter 쿼리 옵션을 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Expand">
      <summary> $expand 쿼리 옵션을 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Select">
      <summary> $select 쿼리 옵션을 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.OrderBy">
      <summary> $orderby 쿼리 옵션을 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Top">
      <summary> $top 쿼리 옵션을 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Skip">
      <summary> $skip 쿼리 옵션을 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.InlineCount">
      <summary> $inlinecount 쿼리 옵션을 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Format">
      <summary> $format 쿼리 옵션을 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.SkipToken">
      <summary> $skiptoken 쿼리 옵션을 허용하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Supported">
      <summary>
        <see cref="T:System.Web.Http.QueryableAttribute" />에서 지원하는 기본 쿼리 옵션에 해당하는 값입니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.All">
      <summary> 모든 쿼리 옵션을 허용하는 값입니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.FilterQueryOption">
      <summary>쿼리를 위한 $filter OData 쿼리 옵션을 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.FilterQueryOption.#ctor(System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />의 원시 $filter 값 및 EdmModel을 기준으로 <see cref="T:System.Web.Http.OData.Query.FilterQueryOption" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="rawValue">$filter 쿼리의 원시 값입니다. null 또는 비어 있을 수 있습니다.</param>
      <param name="context">
        <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 및 일부 형식 정보를 포함하는 <see cref="T:System.Web.Http.OData.ODataQueryContext" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.FilterQueryOption.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>지정된 IQueryable에 filter 쿼리를 적용합니다.</summary>
      <returns>filter 쿼리가 적용된 쿼리입니다.</returns>
      <param name="query">적용 중인 filter 쿼리의 기준이 되는 IQueryable입니다.</param>
      <param name="querySettings">null 전파를 처리해야 하는지를 지정합니다. 기본 쿼리 공급자가 null 전파를 처리하는 경우 false를 전달합니다. 그렇지 않은 경우 true를 전달합니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.FilterQueryOption.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings,System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary>지정된 IQueryable에 filter 쿼리를 적용합니다.</summary>
      <returns>
        <see cref="T:System.Linq.IQueryable" />을 반환합니다.</returns>
      <param name="query">적용 중인 filter 쿼리의 기준이 되는 IQueryable입니다.</param>
      <param name="querySettings">null 전파를 처리해야 하는지를 지정합니다. 기본 쿼리 공급자가 null 전파를 처리하는 경우 false를 전달합니다. 그렇지 않은 경우 true를 전달합니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.FilterQueryOption.Context">
      <summary>지정된 <see cref="T:System.Web.Http.OData.ODataQueryContext" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.FilterQueryOption.FilterClause">
      <summary>이 쿼리 옵션에 대해 구문 분석된 <see cref="P:System.Web.Http.OData.Query.FilterQueryOption.FilterClause" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.OData.Query.SemanticAst.FilterClause" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.FilterQueryOption.RawValue">
      <summary>원시 $filter 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Query.FilterQueryOption.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>지정된 <paramref name="validationSettings" />를 기준으로 filter 쿼리의 유효성을 확인합니다. 유효성 검사에 실패하면 ODataException을 throw합니다.</summary>
      <param name="validationSettings">모든 유효성 검사 설정을 포함하는 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 인스턴스입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.FilterQueryOption.Validator">
      <summary>Filter 쿼리 검사기를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.Validators.FilterQueryValidator" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Query.HandleNullPropagationOption">
      <summary>이 열거는 쿼리 가능한 지원에서 null 전파를 처리하는 방법을 정의합니다.</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.HandleNullPropagationOption.Default">
      <summary>쿼리 컴퍼지션 중에 쿼리 공급자에 따라 null 전파를 처리하는 방법을 확인합니다. <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" />에 사용되는 기본값입니다.</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.HandleNullPropagationOption.True">
      <summary>쿼리 컴퍼지션 중에 null 전파를 처리합니다.</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.HandleNullPropagationOption.False">
      <summary>쿼리 컴퍼지션 중에 null 전파를 처리하지 않습니다.</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.InlineCountQueryOption">
      <summary> $inlinecount 쿼리 옵션의 값을 나타내고 쿼리를 충족하는 엔터티 수를 검색할 방법을 노출합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.InlineCountQueryOption.#ctor(System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.InlineCountQueryOption" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="rawValue">$inlinecount 쿼리 옵션에 대한 원시 값입니다.</param>
      <param name="context">
        <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 및 일부 형식 정보를 포함하는 <see cref="T:System.Web.Http.OData.ODataQueryContext" />입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.InlineCountQueryOption.Context">
      <summary> 지정된 <see cref="T:System.Web.Http.OData.ODataQueryContext" />를 가져옵니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.InlineCountQueryOption.GetEntityCount(System.Linq.IQueryable)">
      <summary> 응답에 인라인 카운트가 포함되는 경우 지정된 쿼리를 충족하는 엔터티 수를 가져오고 그렇지 않은 경우 null입니다. </summary>
      <returns>응답에 인라인 카운트가 포함되는 경우 지정된 쿼리를 충족하는 엔터티 수이고 그렇지 않은 경우 null입니다.</returns>
      <param name="query">카운트를 계산할 쿼리입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.InlineCountQueryOption.RawValue">
      <summary> 원시 $inlinecount 값을 가져옵니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.InlineCountQueryOption.Value">
      <summary> 구문 분석된 양식의 $inlinecount 값을 가져옵니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.InlineCountValue">
      <summary> $inlinecount 쿼리 옵션 값에 대한 열거형을 정의합니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.InlineCountValue.None">
      <summary> 'none' $inlinecount 쿼리 옵션 값에 해당합니다. </summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.InlineCountValue.AllPages">
      <summary> 'allpages' $inlinecount 쿼리 옵션 값에 해당합니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.ODataQueryOptions">
      <summary>쿼리 컴퍼지션을 수행하는 데 사용할 수 있는 복합 OData 쿼리 옵션을 정의합니다. 현재는 $filter, $orderby, $top, $skip 및 $inlinecount만 지원합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.#ctor(System.Web.Http.OData.ODataQueryContext,System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />에서 들어오는 요청과 일부 메타데이터 정보를 토대로 <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="context">
        <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 및 일부 형식 정보를 포함하는 <see cref="T:System.Web.Http.OData.ODataQueryContext" />입니다.</param>
      <param name="request">들어오는 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.ApplyTo(System.Linq.IQueryable)">
      <summary>  개별 쿼리를 IQueryable에 적절한 순서로 적용합니다.</summary>
      <returns>쿼리가 적용된 쿼리입니다.</returns>
      <param name="query">적용 중인 쿼리의 기준이 되는 IQueryable입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>개별 쿼리를 IQueryable에 적절한 순서로 적용합니다.</summary>
      <returns>쿼리가 적용된 쿼리입니다.</returns>
      <param name="query">적용 중인 쿼리의 기준이 되는 IQueryable입니다.</param>
      <param name="querySettings">쿼리 컴퍼지션에서 사용할 설정입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Context">
      <summary>지정된 <see cref="T:System.Web.Http.OData.ODataQueryContext" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Filter">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.FilterQueryOption" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.FilterQueryOption" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.InlineCount">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.InlineCountQueryOption" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.InlineCountQueryOption" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.IsSystemQueryOption(System.String)">
      <summary>지정된 쿼리 옵션이 OData 시스템 쿼리 옵션인지 확인합니다.</summary>
      <returns>쿼리 옵션이 OData 시스템 쿼리 옵션이면 true이고 그렇지 않으면 false입니다.</returns>
      <param name="queryOptionName">쿼리 옵션의 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.LimitResults``1(System.Linq.IQueryable{``0},System.Int32,System.Boolean@)">
      <summary>쿼리 결과를 최대 결과 수로 제한합니다.</summary>
      <returns>제한된 쿼리 결과입니다.</returns>
      <param name="queryable">제한할 Queryable입니다.</param>
      <param name="limit">쿼리 결과 한도입니다.</param>
      <param name="resultsLimited">쿼리 결과가 제한되었으면 true이고 그렇지 않으면 false입니다.</param>
      <typeparam name="T">엔터티 CLR 형식</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.OrderBy">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.OrderByQueryOption" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.OrderByQueryOption" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.RawValues">
      <summary>모든 OData 쿼리 옵션의 원시 문자열을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.ODataRawQueryOptions" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Request">
      <summary>이 인스턴스와 연관된 요청 메시지를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Skip">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.SkipQueryOption" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.SkipQueryOption" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Top">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.TopQueryOption" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.TopQueryOption" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>$skip, $top, $orderby 및 $filter를 포함한 모든 OData 쿼리의 유효성을 지정된 <paramref name="validationSettings" />에 따라 검사합니다. 유효성 검사에 실패하면 ODataException을 throw합니다.</summary>
      <param name="validationSettings">모든 유효성 검사 설정을 포함하는 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 인스턴스입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Validator">
      <summary>쿼리 검사기를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.Validators.ODataQueryValidator" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Query.ODataQueryOptions`1">
      <summary>쿼리 컴퍼지션을 수행하는 데 사용할 수 있는 복합 OData 쿼리 옵션을 정의합니다. 현재는 $filter, $orderby, $top, $skip만 지원합니다.</summary>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions`1.#ctor(System.Web.Http.OData.ODataQueryContext,System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />에서 들어오는 요청과 일부 메타데이터 정보를 토대로 <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="context">
        <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 및 일부 형식 정보를 포함하는 <see cref="T:System.Web.Http.OData.ODataQueryContext" />입니다.</param>
      <param name="request">들어오는 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions`1.ApplyTo(System.Linq.IQueryable)">
      <summary>개별 쿼리를 IQueryable에 적절한 순서로 적용합니다.</summary>
      <returns>쿼리가 적용된 쿼리입니다.</returns>
      <param name="query">적용 중인 쿼리의 기준이 되는 IQueryable입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions`1.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>개별 쿼리를 IQueryable에 적절한 순서로 적용합니다.</summary>
      <returns>쿼리가 적용된 쿼리입니다.</returns>
      <param name="query">적용 중인 쿼리의 기준이 되는 IQueryable입니다.</param>
      <param name="querySettings">쿼리 컴퍼지션에서 사용할 설정입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Query.ODataQuerySettings">
      <summary>이 클래스는 쿼리 컴퍼지션 중에 사용할 설정을 설명합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQuerySettings.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" /> 클래스의 새 인스턴스를 인스턴스화하고 기본 설정을 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQuerySettings.#ctor(System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" /> 클래스의 새 인스턴스를 기존 인스턴스를 토대로 초기화합니다.</summary>
      <param name="settings">복사해올 설정입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQuerySettings.EnableConstantParameterization">
      <summary>상수를 매개 변수화할지 여부를 나타내는 값을 가져오거나 설정합니다. 상수를 매개 변수화하면 Entity Framework의 성능이 향상됩니다.</summary>
      <returns>기본값은 true입니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQuerySettings.EnsureStableOrdering">
      <summary>쿼리 컴퍼지션에서 안정적인 정렬 순서를 보장하기 위해 필요할 경우 원래 쿼리를 변경할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>true 값은 안정적인 정렬 순서를 보장하기 위해 필요할 경우 원래 쿼리를 수정해야 함을 나타냅니다. false 값은 쿼리를 수정하지 않고 정렬 순서를 안정적인 것으로 간주할 수 있음을 나타냅니다. 안정적인 정렬 순서를 보장하는 쿼리 공급자는 이 값을 false로 설정해야 합니다. 기본값은 true입니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQuerySettings.HandleNullPropagation">
      <summary>쿼리 컴퍼지션 중에 null 전파가 처리되는 방식을 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>기본값은 <see cref="F:System.Web.Http.OData.Query.HandleNullPropagationOption.Default" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQuerySettings.PageSize">
      <summary>반환할 최대 쿼리 결과 수를 가져오거나 설정합니다.</summary>
      <returns>반환할 최대 쿼리 결과 수이거나 무제한인 경우 null입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Query.ODataRawQueryOptions">
      <summary>들어오는 요청에서 문자열 형식의 원시 쿼리 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataRawQueryOptions.#ctor"></member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Expand">
      <summary>들어오는 요청 URI에서 원시 $expand 쿼리 값을 가져옵니다(있는 경우).</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Filter">
      <summary>들어오는 요청 URI에서 원시 $filter 쿼리 값을 가져옵니다(있는 경우).</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Format">
      <summary>들어오는 요청 URI에서 원시 $format 쿼리 값을 가져옵니다(있는 경우).</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.InlineCount">
      <summary>들어오는 요청 URI에서 원시 $inlineCount 쿼리 값을 가져옵니다(있는 경우).</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.OrderBy">
      <summary>들어오는 요청 URI에서 원시 $orderby 쿼리 값을 가져옵니다(있는 경우).</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Select">
      <summary>들어오는 요청 URI에서 원시 $select 쿼리 값을 가져옵니다(있는 경우).</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Skip">
      <summary>들어오는 요청 URI에서 원시 $skip 쿼리 값을 가져옵니다(있는 경우).</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.SkipToken">
      <summary>들어오는 요청 URI에서 원시 $skiptoken 쿼리 값을 가져옵니다(있는 경우).</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Top">
      <summary>들어오는 요청 URI에서 원시 $top 쿼리 값을 가져옵니다(있는 경우).</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Query.ODataValidationSettings">
      <summary> 이 클래스는 쿼리를 위한 유효성 검사 설정을 설명합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataValidationSettings.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.AllowedArithmeticOperators">
      <summary> 허용된 산술 연산자(예: 'add', 'sub', 'mul', 'div', 'mod') 목록을 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.AllowedFunctions">
      <summary>  $filter 쿼리에 사용되는 허용된 함수 목록을 가져오거나 설정합니다.         </summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.AllowedLogicalOperators">
      <summary> 허용된 논리 연산자(예: 'eq', 'ne', 'gt', 'ge', 'lt', 'le', 'and', 'or', 'not') 목록을 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.AllowedOrderByProperties">
      <summary> 결과를 orderby할 수 있는 속성 목록을 가져옵니다. 기본적으로 이 목록은 비어 있으며 실제로 임의 속성으로 정렬할 수 있음을 의미합니다.  예를 들어 빈 컬렉션은 클라이언트가 임의 속성으로 쿼리 가능한 결과를 정렬할 수 있음을 의미합니다.   "Name"을 이 목록에 추가하면 쿼리 가능한 결과를 Name 속성으로만 정렬할 수 있습니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.AllowedQueryOptions">
      <summary> 쿼리 내부에 허용되는 쿼리 매개 변수를 가져오거나 설정합니다. 기본값은 $filter, $skip, $top, $orderby, $expand, $select, $inlineCount, $format 및 $skipToken을 포함한 모든 쿼리 옵션입니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.MaxAnyAllExpressionDepth">
      <summary> 쿼리 내부에 중첩된 Any 또는 All 요소의 최대 깊이를 가져오거나 설정합니다. </summary>
      <returns> 쿼리 내부에 중첩된 Any 또는 All 요소의 최대 깊이입니다. </returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.MaxNodeCount">
      <summary> $filter 구문 트리 내부의 최대 노드 수를 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.MaxSkip">
      <summary> 클라이언트가 요청할 수 있는 $skip의 최대값을 가져오거나 설정합니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.MaxTop">
      <summary> 클라이언트가 요청할 수 있는 $top의 최대값을 가져오거나 설정합니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.OrderByItNode">
      <summary> $orderby 절의 '$it' 식으로 순서를 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByItNode.#ctor(Microsoft.Data.OData.Query.OrderByDirection)">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.OrderByItNode" /> 클래스의 새 인스턴스를 인스턴스화합니다. </summary>
      <param name="direction">이 노드에 대한 <see cref="T:Microsoft.Data.OData.Query.OrderByDirection" />입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Query.OrderByNode">
      <summary> $orderby 절의 식으로 단일 순서를 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByNode.#ctor(Microsoft.Data.OData.Query.OrderByDirection)">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.OrderByNode" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByNode.CreateCollection(Microsoft.Data.OData.Query.SemanticAst.OrderByClause)">
      <summary>
        <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OrderByClause" /> 인스턴스의 연결된 목록에서 <see cref="T:System.Web.Http.OData.Query.OrderByPropertyNode" /> 인스턴스 컬렉션을 만듭니다. </summary>
      <returns>새 <see cref="T:System.Web.Http.OData.Query.OrderByPropertyNode" /> 인스턴스의 컬렉션입니다.</returns>
      <param name="orderByClause">
        <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OrderByClause" /> 연결된 목록의 헤드입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByNode.Direction">
      <summary> 현재 노드에 대한 <see cref="T:Microsoft.Data.OData.Query.OrderByDirection" />를 가져옵니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.OrderByPropertyNode">
      <summary>
        <see cref="T:Microsoft.Data.Edm.IEdmProperty" /> 식으로 순서를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByPropertyNode.#ctor(Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.OData.Query.OrderByDirection)">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.OrderByPropertyNode" /> 클래스의 새 인스턴스를 인스턴스화합니다.</summary>
      <param name="property">이 노드에 대한 <see cref="T:Microsoft.Data.Edm.IEdmProperty" />입니다.</param>
      <param name="direction">이 노드에 대한 <see cref="T:Microsoft.Data.OData.Query.OrderByDirection" />입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByPropertyNode.Property">
      <summary>현재 노드에 대한 <see cref="T:Microsoft.Data.Edm.IEdmProperty" />를 가져옵니다.</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.OrderByQueryOption">
      <summary>쿼리를 위한 $orderby OData 쿼리 옵션을 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByQueryOption.#ctor(System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />의 원시 $orderby 값 및 EdmModel을 기준으로 <see cref="T:System.Web.Http.OData.Query.OrderByQueryOption" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="rawValue">$orderby 쿼리의 원시 값입니다. null 또는 비어 있을 수 있습니다.</param>
      <param name="context">
        <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 및 일부 형식 정보를 포함하는 <see cref="T:System.Web.Http.OData.ODataQueryContext" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByQueryOption.ApplyTo(System.Linq.IQueryable)">
      <summary>지정된 IQueryable에 $orderby 쿼리를 적용합니다.</summary>
      <returns>orderby 쿼리가 적용된 쿼리입니다.</returns>
      <param name="query">적용 중인 orderby 쿼리의 기준이 되는 IQueryable입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByQueryOption.ApplyTo``1(System.Linq.IQueryable{``0})">
      <summary>  지정된 IQueryable에 $orderby 쿼리를 적용합니다.</summary>
      <returns>orderby 쿼리가 적용된 쿼리입니다.</returns>
      <param name="query">적용 중인 orderby 쿼리의 기준이 되는 IQueryable입니다.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByQueryOption.Context">
      <summary>지정된 <see cref="T:System.Web.Http.OData.ODataQueryContext" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByQueryOption.OrderByNodes">
      <summary>현재 <see cref="T:System.Web.Http.OData.Query.OrderByQueryOption" />에 대한 <see cref="T:System.Web.Http.OData.Query.OrderByPropertyNode" /> 인스턴스 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByQueryOption.RawValue">
      <summary>원시 $orderby 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByQueryOption.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>지정된 <paramref name="validationSettings" />를 기준으로 orderby 쿼리의 유효성을 확인합니다. 유효성 검사에 실패하면 ODataException을 throw합니다.</summary>
      <param name="validationSettings">모든 유효성 검사 설정을 포함하는 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 인스턴스입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByQueryOption.Validator">
      <summary>OrderBy 쿼리 검사기를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.Validators.OrderByQueryValidator" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Query.QueryFilterProvider">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 형식의 매개 변수를 바인딩하지 않는 <see cref="T:System.Linq.IQueryable" /> 또는 <see cref="T:System.Linq.IQueryable`1" /> 반환 형식의 모든 작업에 작업 필터를 적용하는 <see cref="T:System.Web.Http.Filters.IFilterProvider" />의 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.QueryFilterProvider.#ctor(System.Web.Http.Filters.IActionFilter)">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.QueryFilterProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="queryFilter">쿼리를 실행하는 작업 필터입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.QueryFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>지정된 작업에 적용할 필터를 제공합니다.</summary>
      <returns>지정된 작업에 적용할 필터입니다.</returns>
      <param name="configuration">서버 구성입니다.</param>
      <param name="actionDescriptor">필터를 제공할 작업에 대한 작업 설명자입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.QueryFilterProvider.QueryFilter">
      <summary>쿼리를 실행하는 작업 필터를 가져옵니다.</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.SkipQueryOption">
      <summary>쿼리를 위한 $skip OData 쿼리 옵션을 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.SkipQueryOption.#ctor(System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />의 원시 $skip 값 및 EdmModel을 기준으로 <see cref="T:System.Web.Http.OData.Query.SkipQueryOption" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="rawValue">$skip 쿼리의 원시 값입니다. null 또는 비어 있을 수 있습니다.</param>
      <param name="context">
        <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 및 일부 형식 정보를 포함하는 <see cref="T:System.Web.Http.OData.ODataQueryContext" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.SkipQueryOption.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <returns>
        <see cref="T:System.Linq.IQueryable" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Query.SkipQueryOption.ApplyTo``1(System.Linq.IQueryable{``0},System.Web.Http.OData.Query.ODataQuerySettings)">
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />을 반환합니다.</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Query.SkipQueryOption.Context">
      <summary>지정된 <see cref="T:System.Web.Http.OData.ODataQueryContext" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.SkipQueryOption.RawValue">
      <summary>원시 $skip 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Query.SkipQueryOption.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>지정된 <paramref name="validationSettings" />를 기준으로 skip 쿼리의 유효성을 확인합니다. 유효성 검사에 실패하면 ODataException을 throw합니다.</summary>
      <param name="validationSettings">모든 유효성 검사 설정을 포함하는 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 인스턴스입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.SkipQueryOption.Validator">
      <summary>  Skip 쿼리 검사기를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.Validators.SkipQueryValidator" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.SkipQueryOption.Value">
      <summary>구문 분석된 정수로 $skip의 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Int32" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Query.TopQueryOption">
      <summary>쿼리를 위한 $top OData 쿼리 옵션을 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.TopQueryOption.#ctor(System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />의 원시 $top 값 및 EdmModel을 기준으로 <see cref="T:System.Web.Http.OData.Query.TopQueryOption" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="rawValue">$top 쿼리의 원시 값입니다. null 또는 비어 있을 수 있습니다.</param>
      <param name="context">
        <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 및 일부 형식 정보를 포함하는 <see cref="T:System.Web.Http.OData.ODataQueryContext" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.TopQueryOption.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <returns>
        <see cref="T:System.Linq.IQueryable" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Query.TopQueryOption.ApplyTo``1(System.Linq.IQueryable{``0},System.Web.Http.OData.Query.ODataQuerySettings)">
      <returns>
        <see cref="T:System.Linq.IOrderedQueryable`1" />을 반환합니다.</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Query.TopQueryOption.Context">
      <summary>지정된 <see cref="T:System.Web.Http.OData.ODataQueryContext" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.ODataQueryContext" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.TopQueryOption.RawValue">
      <summary>원시 $top 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Query.TopQueryOption.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>지정된 <paramref name="validationSettings" />를 기준으로 top 쿼리의 유효성을 확인합니다. 유효성 검사에 실패하면 ODataException을 throw합니다.</summary>
      <param name="validationSettings">모든 유효성 검사 설정을 포함하는 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 인스턴스입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.TopQueryOption.Validator">
      <summary>Top 쿼리 검사기를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Query.Validators.TopQueryValidator" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.TopQueryOption.Value">
      <summary>구문 분석된 정수로 $top의 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Int32" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Query.Validators.FilterQueryValidator">
      <summary> 설정에 따라 FilterQueryOption의 유효성을 검사하는 데 사용되는 검사기 클래스를 정의합니다.  </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.Validators.FilterQueryValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.Validate(System.Web.Http.OData.Query.FilterQueryOption,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 이 검사기 클래스의 진입점입니다. 이 메서드를 사용하여 FilterQueryOption의 유효성을 검사합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateAllNode(Microsoft.Data.OData.Query.SemanticAst.AllNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 필터 쿼리 내에서 'all' 쿼리를 제한하려면 이 메서드를 재정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateAnyNode(Microsoft.Data.OData.Query.SemanticAst.AnyNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 필터 쿼리 내에서 'any' 쿼리를 제한하려면 이 메서드를 재정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateArithmeticOperator(Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> add, sub, mul, div, mod를 포함한 산술 연산자에 대해 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateBinaryOperatorNode(Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>필터 쿼리 내에서 이진 연산자를 제한하려면 이 메서드를 재정의합니다. 'not'과 모든 산술 연산자를 제외한 모든 논리 연산자를 포함합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateCollectionPropertyAccessNode(Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 컬렉션 속성 접근자의 유효성을 검사하려면 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateConstantNode(Microsoft.Data.OData.Query.SemanticAst.ConstantNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 필터 쿼리 내에서 'constant'를 제한하려면 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateConvertNode(Microsoft.Data.OData.Query.SemanticAst.ConvertNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 필터 쿼리 내에서 'cast'를 제한하려면 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateEntityCollectionCastNode(Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 엔터티 컬렉션에 대한 캐스팅의 유효성을 검사하려면 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateLogicalOperator(Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 논리 연산자(예: 'eq', 'ne', 'gt', 'ge', 'lt', 'le', 'and', 'or')의 유효성을 검사하기 위해 이 메서드를 재정의합니다.  여기에 'not'은 포함되지 않습니다. ValidateUnaryOperatorNode를 재정의하여 'not'을 사용자 지정하십시오. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateNavigationPropertyNode(Microsoft.Data.OData.Query.SemanticAst.QueryNode,Microsoft.Data.Edm.IEdmNavigationProperty,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 탐색 속성 노드에 대해 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateQueryNode(Microsoft.Data.OData.Query.SemanticAst.QueryNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 각 쿼리 노드를 방문하는 경우 이 메서드를 재정의합니다.  </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateRangeVariable(Microsoft.Data.OData.Query.SemanticAst.RangeVariable,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 필터 쿼리에 사용되는 매개 변수의 유효성을 검사하려면 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateSingleEntityCastNode(Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 단일 엔터티에 대한 캐스팅의 유효성을 검사하려면 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateSingleValueFunctionCallNode(Microsoft.Data.OData.Query.SingleValueFunctionCallNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 'length', 'years' 등과 같은 함수 호출의 유효성을 검사하려면 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateSingleValuePropertyAccessNode(Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 속성 접근자의 유효성을 검사하려면 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateUnaryOperatorNode(Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> NOT 연산자의 유효성을 검사하려면 이 메서드를 재정의합니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.Validators.ODataQueryValidator"></member>
    <member name="M:System.Web.Http.OData.Query.Validators.ODataQueryValidator.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.Validators.ODataQueryValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.ODataQueryValidator.Validate(System.Web.Http.OData.Query.ODataQueryOptions,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary> 지정된 ODataQueryOption이 AllowedQueryOptions에 있는 것인지를 확인합니다. 기본적으로는 4개의 연산자를 모두 허용합니다. </summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.Validators.OrderByQueryValidator"></member>
    <member name="M:System.Web.Http.OData.Query.Validators.OrderByQueryValidator.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.Validators.OrderByQueryValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.OrderByQueryValidator.Validate(System.Web.Http.OData.Query.OrderByQueryOption,System.Web.Http.OData.Query.ODataValidationSettings)"></member>
    <member name="T:System.Web.Http.OData.Query.Validators.SkipQueryValidator"></member>
    <member name="M:System.Web.Http.OData.Query.Validators.SkipQueryValidator.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.Validators.SkipQueryValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.SkipQueryValidator.Validate(System.Web.Http.OData.Query.SkipQueryOption,System.Web.Http.OData.Query.ODataValidationSettings)"></member>
    <member name="T:System.Web.Http.OData.Query.Validators.TopQueryValidator"></member>
    <member name="M:System.Web.Http.OData.Query.Validators.TopQueryValidator.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Query.Validators.TopQueryValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.TopQueryValidator.Validate(System.Web.Http.OData.Query.TopQueryOption,System.Web.Http.OData.Query.ODataValidationSettings)"></member>
    <member name="T:System.Web.Http.OData.Routing.ActionPathSegment">
      <summary>작업 호출을 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ActionPathSegment.#ctor(Microsoft.Data.Edm.IEdmFunctionImport)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ActionPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">호출하는 작업입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ActionPathSegment.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ActionPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionName">작업의 이름입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ActionPathSegment.Action">
      <summary>호출하는 작업을 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ActionPathSegment.ActionName">
      <summary>작업의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ActionPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ActionPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ActionPathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ActionPathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.BatchPathSegment">
      <summary>$batch 세그먼트를 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.BatchPathSegment.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.BatchPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>   이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.BatchPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.BatchPathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.BatchPathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.CastPathSegment">
      <summary>캐스팅을 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.CastPathSegment.#ctor(Microsoft.Data.Edm.IEdmEntityType)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.CastPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="castType">캐스팅의 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.CastPathSegment.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.CastPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="castTypeName">캐스팅 형식 이름입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.CastPathSegment.CastType">
      <summary>캐스팅의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.CastPathSegment.CastTypeName">
      <summary>  캐스팅 형식의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.CastPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>  이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.CastPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.CastPathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.CastPathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.DefaultODataPathHandler">
      <summary> OData 경로를 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />로 구문 분석하고 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />를 OData 링크로 변환합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.DefaultODataPathHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.Link(System.Web.Http.OData.Routing.ODataPath)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ODataPath" />의 인스턴스를 OData 링크로 변환합니다. </summary>
      <returns> 생성된 OData 링크입니다. </returns>
      <param name="path">링크로 변환할 OData 경로입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.Parse(Microsoft.Data.Edm.IEdmModel,System.String)">
      <summary> 지정된 OData 경로를 EDM 형식 및 해당 경로의 엔터티 집합에 대한 추가 정보가 포함된 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />로 구문 분석합니다. </summary>
      <returns>경로의 구문 분석된 표현이거나 경로가 모델과 일치하지 않는 경우 null입니다.</returns>
      <param name="model">경로 구문 분석에 사용할 모델입니다.</param>
      <param name="odataPath">구문 분석할 OData 경로입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseAtCollection(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary> 컬렉션 뒤의 다음 OData 경로 세그먼트를 구문 분석합니다. </summary>
      <returns>세그먼트의 구문 분석된 표현입니다.</returns>
      <param name="model">경로 구문 분석에 사용할 모델입니다.</param>
      <param name="previous">이전 경로 세그먼트입니다.</param>
      <param name="previousEdmType">이전 세그먼트까지 OData 경로의 EDM 형식입니다.</param>
      <param name="segment">구문 분석할 세그먼트의 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseAtComplex(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary> 복잡한 형식 세그먼트 뒤의 다음 OData 경로 세그먼트를 구문 분석합니다. </summary>
      <returns>세그먼트의 구문 분석된 표현입니다.</returns>
      <param name="model">경로 구문 분석에 사용할 모델입니다.</param>
      <param name="previous">이전 경로 세그먼트입니다.</param>
      <param name="previousEdmType">이전 세그먼트까지 OData 경로의 EDM 형식입니다.</param>
      <param name="segment">구문 분석할 세그먼트의 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseAtEntity(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary> 엔터티 뒤의 다음 OData 경로 세그먼트를 구문 분석합니다. </summary>
      <returns>세그먼트의 구문 분석된 표현입니다.</returns>
      <param name="model">경로 구문 분석에 사용할 모델입니다.</param>
      <param name="previous">이전 경로 세그먼트입니다.</param>
      <param name="previousEdmType">이전 세그먼트까지 OData 경로의 EDM 형식입니다.</param>
      <param name="segment">구문 분석할 세그먼트의 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseAtEntityCollection(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary> 엔터티 컬렉션 뒤의 다음 OData 경로 세그먼트를 구문 분석합니다. </summary>
      <returns>세그먼트의 구문 분석된 표현입니다.</returns>
      <param name="model">경로 구문 분석에 사용할 모델입니다.</param>
      <param name="previous">이전 경로 세그먼트입니다.</param>
      <param name="previousEdmType">이전 세그먼트까지 OData 경로의 EDM 형식입니다.</param>
      <param name="segment">구문 분석할 세그먼트의 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseAtPrimitiveProperty(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary> 기본 속성 뒤의 다음 OData 경로 세그먼트를 구문 분석합니다. </summary>
      <returns>세그먼트의 구문 분석된 표현입니다.</returns>
      <param name="model">경로 구문 분석에 사용할 모델입니다.</param>
      <param name="previous">이전 경로 세그먼트입니다.</param>
      <param name="previousEdmType">이전 세그먼트까지 OData 경로의 EDM 형식입니다.</param>
      <param name="segment">구문 분석할 세그먼트의 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseEntrySegment(Microsoft.Data.Edm.IEdmModel,System.String)">
      <summary> 서비스 기본 URI 뒤의 첫 번째 OData 세그먼트를 구문 분석합니다. </summary>
      <returns>세그먼트의 구문 분석된 표현입니다.</returns>
      <param name="model">경로 구문 분석에 사용할 모델입니다.</param>
      <param name="segment">구문 분석할 세그먼트의 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseNextSegment(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary> 다음 OData 경로 세그먼트를 구문 분석합니다. </summary>
      <returns>세그먼트의 구문 분석된 표현입니다.</returns>
      <param name="model">경로 구문 분석에 사용할 모델입니다.</param>
      <param name="previous">이전 경로 세그먼트입니다.</param>
      <param name="previousEdmType">이전 세그먼트까지 OData 경로의 EDM 형식입니다.</param>
      <param name="segment">구문 분석할 세그먼트의 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseSegments(System.String)">
      <summary> OData 경로를 세그먼트로 구문 분석합니다. </summary>
      <returns>OData 경로의 세그먼트입니다.</returns>
      <param name="odataPath">OData 경로입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.EntitySetPathSegment">
      <summary>엔터티 집합을 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.EntitySetPathSegment.#ctor(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.EntitySetPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="entitySet">액세스 중인 엔터티 집합입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.EntitySetPathSegment.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.EntitySetPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.EntitySetPathSegment.EntitySet">
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmEntitySet" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.EntitySetPathSegment.EntitySetName">
      <summary>엔터티 집합의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.EntitySetPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>   이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.EntitySetPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>   이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.EntitySetPathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.EntitySetPathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.IODataPathHandler">
      <summary> OData 경로를 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />로 구문 분석하는 기능을 노출하고 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />를 OData 링크로 변환합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.IODataPathHandler.Link(System.Web.Http.OData.Routing.ODataPath)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ODataPath" />의 인스턴스를 OData 링크로 변환합니다. </summary>
      <returns>생성된 OData 링크입니다.</returns>
      <param name="path">링크로 변환할 OData 경로입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.IODataPathHandler.Parse(Microsoft.Data.Edm.IEdmModel,System.String)">
      <summary> 지정된 OData 경로를 EDM 형식 및 해당 경로의 엔터티 집합에 대한 추가 정보가 포함된 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />로 구문 분석합니다. </summary>
      <returns>URI의 구문 분석된 표현이거나 URI가 모델과 일치하지 않는 경우 null입니다.</returns>
      <param name="model">경로 구문 분석에 사용할 모델입니다.</param>
      <param name="odataPath">구문 분석할 OData 경로입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.KeyValuePathSegment">
      <summary>키를 이용한 엔터티 컬렉션으로 인덱싱을 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.KeyValuePathSegment.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.KeyValuePathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션으로 인덱싱에 사용할 키 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.KeyValuePathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.KeyValuePathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.KeyValuePathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.KeyValuePathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.KeyValuePathSegment.Value">
      <summary>컬렉션으로 인덱싱에 사용할 키 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.LinksPathSegment">
      <summary>$links 세그먼트를 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.LinksPathSegment.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.LinksPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>  이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.LinksPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.LinksPathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.LinksPathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.MetadataPathSegment">
      <summary>$metadata 세그먼트를 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.MetadataPathSegment.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.MetadataPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>  이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.MetadataPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>  이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.MetadataPathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.MetadataPathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.NavigationPathSegment">
      <summary>탐색을 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.NavigationPathSegment.#ctor(Microsoft.Data.Edm.IEdmNavigationProperty)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.NavigationPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="navigationProperty">이 세그먼트에서 액세스하는 탐색 속성입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.NavigationPathSegment.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.NavigationPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.NavigationPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.NavigationPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.NavigationPathSegment.NavigationProperty">
      <summary>이 세그먼트에서 액세스하는 탐색 속성을 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmNavigationProperty" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.NavigationPathSegment.NavigationPropertyName">
      <summary>탐색 속성의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.NavigationPathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.NavigationPathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataActionSelector">
      <summary> OData 요청에 대한 작업을 선택하는 데 서버의 OData 라우팅 규칙을 사용하는 <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" />의 구현입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataActionSelector.#ctor(System.Web.Http.Controllers.IHttpActionSelector)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ODataActionSelector" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="innerSelector">호출할 내부 컨트롤러 선택기입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary> 선택기가 선택할 수 있는 모든 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />의 동작 문자열로 키가 지정된 맵을 반환합니다.  이것은 주로 컨트롤러에서 가능한 모든 작업을 검색하기 위해 <see cref="T:System.Web.Http.Description.IApiExplorer" />에서 호출합니다. </summary>
      <returns> 선택기가 선택할 수 있는 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> 맵이거나, 선택기에 잘 정의된 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />의 매핑이 없는 경우 null입니다. </returns>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />에 대한 동작을 선택합니다. </summary>
      <returns> 선택한 동작입니다. </returns>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataPath">
      <summary>EDM 형식 및 해당 경로의 엔터티 집합에 대한 추가 정보와 함께 OData 경로에 대한 개체 표현을 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPath.#ctor(System.Collections.Generic.IList{System.Web.Http.OData.Routing.ODataPathSegment})">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ODataPath" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="segments">경로에 대한 경로 세그먼트입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPath.#ctor(System.Web.Http.OData.Routing.ODataPathSegment[])">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ODataPath" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="segments">경로에 대한 경로 세그먼트입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPath.EdmType">
      <summary>경로의 EDM 형식을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmType" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPath.EntitySet">
      <summary>경로의 엔터티 집합을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmEntitySet" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPath.PathTemplate">
      <summary>경로에서 세그먼트의 형식을 설명하는 경로 템플릿을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPath.Segments">
      <summary>OData 경로에 대한 경로 세그먼트를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPath.ToString">
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataPathParameterBindingAttribute">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ODataPath" />의 인스턴스를 작업 매개 변수로 바인딩하는 데 사용되는 <see cref="T:System.Web.Http.ParameterBindingAttribute" />의 구현입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathParameterBindingAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ODataPathParameterBindingAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathParameterBindingAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary> 매개 변수 바인딩을 가져옵니다. </summary>
      <returns> 매개 변수 바인딩입니다. </returns>
      <param name="parameter">매개 변수 설명입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataPathRouteConstraint">
      <summary> OData 경로와만 일치하는 <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" />의 구현입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathRouteConstraint.#ctor(System.Web.Http.OData.Routing.IODataPathHandler,Microsoft.Data.Edm.IEdmModel,System.String,System.Collections.Generic.IEnumerable{System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention})">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ODataPathRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="pathHandler">구문 분석하는 데 사용할 OData 경로 처리기입니다.</param>
      <param name="model">경로를 구문 분석하는 데 사용할 EDM 모델입니다.</param>
      <param name="routeName">이 제약 조건을 연결할 경로의 이름입니다.</param>
      <param name="routingConventions">컨트롤러 이름을 선택하는 데 사용할 OData 라우팅 규칙입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPathRouteConstraint.EdmModel">
      <summary> 경로를 구문 분석하는 데 사용할 EDM 모델을 가져옵니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary> 이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다. </summary>
      <returns> 이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다. </returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPathRouteConstraint.PathHandler">
      <summary> 구문 분석하는 데 사용할 OData 경로 처리기를 가져옵니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPathRouteConstraint.RouteName">
      <summary> 이 제약 조건을 연결할 경로의 이름을 가져옵니다. </summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPathRouteConstraint.RoutingConventions">
      <summary> 컨트롤러 이름을 선택하는 데 사용할 OData 라우팅 규칙을 가져옵니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathRouteConstraint.SelectControllerName(System.Web.Http.OData.Routing.ODataPath,System.Net.Http.HttpRequestMessage)">
      <summary> 요청을 발송할 컨트롤러의 이름을 선택합니다. </summary>
      <returns>발송할 컨트롤러의 이름이거나 확인할 수 없는 경우 null입니다.</returns>
      <param name="path">요청의 OData 경로입니다.</param>
      <param name="request">요청입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataPathSegment">
      <summary>EDM 형식 및 해당 경로의 엔터티 집합에 대한 추가 정보와 함께 OData 경로 세그먼트에 대한 개체 표현을 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathSegment.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>  이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataRouteConstants"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.Action"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.ConstraintName"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.Controller"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.Key"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.NavigationProperty"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.ODataPath"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.ODataPathTemplate"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.RelatedKey"></member>
    <member name="T:System.Web.Http.OData.Routing.ODataSegmentKinds">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" />의 구현에 대한 세그먼트 종류 값을 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Action"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Batch"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Cast"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.EntitySet"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Key"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Links"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Metadata"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Navigation"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Property"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.ServiceBase"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Unresolved"></member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Value"></member>
    <member name="T:System.Web.Http.OData.Routing.PropertyAccessPathSegment">
      <summary>속성 액세스를 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.PropertyAccessPathSegment.#ctor(Microsoft.Data.Edm.IEdmProperty)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.PropertyAccessPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="property">이 세그먼트에서 액세스하는 속성입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.PropertyAccessPathSegment.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.PropertyAccessPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyName">속성 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.PropertyAccessPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.PropertyAccessPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>  이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.PropertyAccessPathSegment.Property">
      <summary>이 세그먼트에서 액세스하는 속성을 가져옵니다.</summary>
      <returns>
        <see cref="T:Microsoft.Data.Edm.IEdmProperty" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.PropertyAccessPathSegment.PropertyName">
      <summary>속성의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.PropertyAccessPathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.PropertyAccessPathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.UnresolvedPathSegment">
      <summary>확인할 수 없는 세그먼트를 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.UnresolvedPathSegment.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.UnresolvedPathSegment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="segmentValue">확인할 수 없는 세그먼트 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.UnresolvedPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <returns>이전 경로 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이 세그먼트의 EDM 형식을 가져옵니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.UnresolvedPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.UnresolvedPathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.UnresolvedPathSegment.SegmentValue">
      <summary>확인할 수 없는 세그먼트 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.UnresolvedPathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ValuePathSegment">
      <summary>$value 세그먼트를 나타내는 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ValuePathSegment.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.ValuePathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>이 세그먼트의 EDM 형식을 가져옵니다.</summary>
      <returns>이 세그먼트의 EDM 형식입니다.</returns>
      <param name="previousEdmType">이전 경로 세그먼트의 EDM 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ValuePathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>이 세그먼트의 엔터티 집합을 가져옵니다.</summary>
      <returns>이 세그먼트의 엔터티 집합입니다.</returns>
      <param name="previousEntitySet">이전 경로 세그먼트의 엔터티 집합입니다.</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ValuePathSegment.SegmentKind">
      <summary>현재 세그먼트의 세그먼트 종류를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ValuePathSegment.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.ActionRoutingConvention">
      <summary> 작업 호출을 처리하는 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 구현입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.ActionRoutingConvention.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.Conventions.ActionRoutingConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.ActionRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary> OData 요청에 대한 작업을 선택합니다. </summary>
      <returns>이 규칙으로 요청이 처리되지 않는 경우 null이고 그렇지 않은 경우 선택한 작업의 이름입니다. </returns>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionMap">작업 맵입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.EntityRoutingConvention">
      <summary> 엔터티에서 키를 이용한 작업을 처리하는 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 구현입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.EntityRoutingConvention.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.Conventions.EntityRoutingConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.EntityRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary> OData 요청에 대한 작업을 선택합니다. </summary>
      <returns>이 규칙으로 요청이 처리되지 않는 경우 null이고 그렇지 않은 경우 선택한 작업의 이름입니다. </returns>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionMap">작업 맵입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.EntitySetRoutingConvention">
      <summary> 엔터티 집합을 처리하는 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 구현입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.EntitySetRoutingConvention.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.Conventions.EntitySetRoutingConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.EntitySetRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary> OData 요청에 대한 작업을 선택합니다. </summary>
      <returns>이 규칙으로 요청이 처리되지 않는 경우 null이고 그렇지 않은 경우 선택한 작업의 이름입니다. </returns>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionMap">작업 맵입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.EntitySetRoutingConvention.SelectController(System.Web.Http.OData.Routing.ODataPath,System.Net.Http.HttpRequestMessage)">
      <summary> OData 요청에 대한 컨트롤러를 선택합니다. </summary>
      <returns>이 규칙으로 요청이 처리되지 않는 경우 null이고 그렇지 않은 경우 선택한 컨트롤러의 이름입니다. </returns>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="request">요청입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention">
      <summary> OData 요청에 대한 컨트롤러와 작업을 선택하기 위한 추상화를 제공합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary> OData 요청에 대한 작업을 선택합니다. </summary>
      <returns>이 규칙으로 요청이 처리되지 않는 경우 null이고 그렇지 않은 경우 선택한 작업의 이름입니다.</returns>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionMap">작업 맵입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention.SelectController(System.Web.Http.OData.Routing.ODataPath,System.Net.Http.HttpRequestMessage)">
      <summary> OData 요청에 대한 컨트롤러를 선택합니다. </summary>
      <returns>이 규칙으로 요청이 처리되지 않는 경우 null이고 그렇지 않은 경우 선택한 컨트롤러의 이름입니다.</returns>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="request">요청입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.LinksRoutingConvention">
      <summary> 링크 조작을 처리하는 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 구현입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.LinksRoutingConvention.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.Conventions.LinksRoutingConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.LinksRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary> 작업을 선택합니다. </summary>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionMap">작업 맵입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.MetadataRoutingConvention">
      <summary> OData 메타데이터 요청을 처리하는 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 구현입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.MetadataRoutingConvention.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.Conventions.MetadataRoutingConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.MetadataRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary> OData 요청에 대한 작업을 선택합니다. </summary>
      <returns>이 규칙으로 요청이 처리되지 않는 경우 null이고 그렇지 않은 경우 선택한 작업의 이름입니다. </returns>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionMap">작업 맵입니다.</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.MetadataRoutingConvention.SelectController(System.Web.Http.OData.Routing.ODataPath,System.Net.Http.HttpRequestMessage)">
      <summary> OData 요청에 대한 컨트롤러를 선택합니다. </summary>
      <returns>이 규칙으로 요청이 처리되지 않는 경우 null이고 그렇지 않은 경우 선택한 컨트롤러의 이름입니다. </returns>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="request">요청입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.NavigationRoutingConvention">
      <summary> 탐색 속성을 처리하는 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 구현입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.NavigationRoutingConvention.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.Conventions.NavigationRoutingConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.NavigationRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary> 작업을 선택합니다. </summary>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionMap">작업 맵입니다.</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.ODataRoutingConventions">
      <summary> 라우팅 규칙을 만들기 위한 도우미 메서드를 제공합니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.ODataRoutingConventions.CreateDefault">
      <summary> 기본 OData 라우팅 규칙의 변경할 수 있는 컬렉션을 만듭니다. </summary>
      <returns>기본 OData 라우팅 규칙의 변경할 수 있는 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.UnmappedRequestRoutingConvention">
      <summary> 작업이 있는 경우 항상 HandleUnmappedRequest라는 작업을 선택하는 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 구현입니다. </summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.UnmappedRequestRoutingConvention.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OData.Routing.Conventions.UnmappedRequestRoutingConvention" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.UnmappedRequestRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary> 작업을 선택합니다. </summary>
      <param name="odataPath">OData 경로입니다.</param>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionMap">작업 맵입니다.</param>
    </member>
  </members>
</doc>